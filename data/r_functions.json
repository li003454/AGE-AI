[
    {
        "name": "allShortestPaths",
        "language": "r",
        "package": "e1071",
        "description": "‘allShortestPaths’ finds all shortest paths in a directed (or undirected) graph using Floyd's algorithm. ‘extractPath’ can be used to actually extract the path between a given pair of nodes."
    },
    {
        "name": "bclust",
        "language": "r",
        "package": "e1071",
        "description": "Cluster the data in ‘x’ using the bagged clustering algorithm. A partitioning cluster algorithm such as ‘kmeans’ is run repeatedly on bootstrap samples from the original data. The resulting cluster centers are then combined using the hierarchical cluster algorithm ‘hclust’."
    },
    {
        "name": "best.gknn",
        "language": "r",
        "package": "e1071",
        "description": "Convenience tuning wrapper functions, using ‘tune’."
    },
    {
        "name": "best.nnet",
        "language": "r",
        "package": "e1071",
        "description": "Convenience tuning wrapper functions, using ‘tune’."
    },
    {
        "name": "best.randomForest",
        "language": "r",
        "package": "e1071",
        "description": "Convenience tuning wrapper functions, using ‘tune’."
    },
    {
        "name": "best.rpart",
        "language": "r",
        "package": "e1071",
        "description": "Convenience tuning wrapper functions, using ‘tune’."
    },
    {
        "name": "best.svm",
        "language": "r",
        "package": "e1071",
        "description": "Convenience tuning wrapper functions, using ‘tune’."
    },
    {
        "name": "best.tune",
        "language": "r",
        "package": "e1071",
        "description": "This generic function tunes hyperparameters of statistical methods using a grid search over supplied parameter ranges."
    },
    {
        "name": "bincombinations",
        "language": "r",
        "package": "e1071",
        "description": "Returns a matrix containing the 2^p vectors of length ‘p’."
    },
    {
        "name": "bootstrap.lca",
        "language": "r",
        "package": "e1071",
        "description": "This function draws bootstrap samples from a given LCA model and refits a new LCA model for each sample. The quality of fit of these models is compared to the original model."
    },
    {
        "name": "centers.bclust",
        "language": "r",
        "package": "e1071",
        "description": "Cluster the data in ‘x’ using the bagged clustering algorithm. A partitioning cluster algorithm such as ‘kmeans’ is run repeatedly on bootstrap samples from the original data. The resulting cluster centers are then combined using the hierarchical cluster algorithm ‘hclust’."
    },
    {
        "name": "classAgreement",
        "language": "r",
        "package": "e1071",
        "description": "‘classAgreement()’ computes several coefficients of agreement between the columns and rows of a 2-way contingency table."
    },
    {
        "name": "clusters.bclust",
        "language": "r",
        "package": "e1071",
        "description": "Cluster the data in ‘x’ using the bagged clustering algorithm. A partitioning cluster algorithm such as ‘kmeans’ is run repeatedly on bootstrap samples from the original data. The resulting cluster centers are then combined using the hierarchical cluster algorithm ‘hclust’."
    },
    {
        "name": "cmeans",
        "language": "r",
        "package": "e1071",
        "description": "The fuzzy version of the known _k_means clustering algorithm as well as an on-line variant (Unsupervised Fuzzy Competitive learning)."
    },
    {
        "name": "compareMatchedClasses",
        "language": "r",
        "package": "e1071",
        "description": "Try to find a mapping between the two groupings, such that as many cases as possible are in one of the matched pairs."
    },
    {
        "name": "countpattern",
        "language": "r",
        "package": "e1071",
        "description": "Every row of the binary matrix ‘x’ is transformed into a binary pattern and these patterns are counted."
    },
    {
        "name": "cshell",
        "language": "r",
        "package": "e1071",
        "description": "The _c_-shell clustering algorithm, the shell prototype-based version (ring prototypes) of the fuzzy _k_means clustering method."
    },
    {
        "name": "d2sigmoid",
        "language": "r",
        "package": "e1071",
        "description": "Sigmoid 1/(1 + exp(-x)), first and second derivative."
    },
    {
        "name": "ddiscrete",
        "language": "r",
        "package": "e1071",
        "description": "These functions provide information about the discrete distribution where the probability of the elements of ‘values’ is proportional to the values given in ‘probs’, which are normalized to sum up to 1. ‘ddiscrete’ gives the density, ‘pdiscrete’ gives the distribution function, ‘qdiscrete’ gives the quantile function and ‘rdiscrete’ generates random deviates."
    },
    {
        "name": "dsigmoid",
        "language": "r",
        "package": "e1071",
        "description": "Sigmoid 1/(1 + exp(-x)), first and second derivative."
    },
    {
        "name": "element",
        "language": "r",
        "package": "e1071",
        "description": "Returns the element of ‘x’ specified by ‘i’."
    },
    {
        "name": "extractPath",
        "language": "r",
        "package": "e1071",
        "description": "‘allShortestPaths’ finds all shortest paths in a directed (or undirected) graph using Floyd's algorithm. ‘extractPath’ can be used to actually extract the path between a given pair of nodes."
    },
    {
        "name": "fclustIndex",
        "language": "r",
        "package": "e1071",
        "description": "Calculates the values of several fuzzy validity measures. The values of the indexes can be independently used in order to evaluate and compare clustering partitions or even to determine the number of clusters existing in a data set."
    },
    {
        "name": "gknn",
        "language": "r",
        "package": "e1071",
        "description": "‘gknn’ is an implementation of the k-nearest neighbours algorithm making use of general distance measures. A formula interface is provided."
    },
    {
        "name": "hamming.distance",
        "language": "r",
        "package": "e1071",
        "description": "If both ‘x’ and ‘y’ are vectors, ‘hamming.distance’ returns the Hamming distance (number of different elements) between this two vectors. If ‘x’ is a matrix, the Hamming distances between the rows of ‘x’ are computed and ‘y’ is ignored."
    },
    {
        "name": "hamming.window",
        "language": "r",
        "package": "e1071",
        "description": "The filter coefficients w(i) of a Hamming window of length ‘n’ are computed according to the formula w(i) = 0.54 - 0.46*cos(2*pi*i/(n-1))"
    },
    {
        "name": "hanning.window",
        "language": "r",
        "package": "e1071",
        "description": "The filter coefficients w(i) of a Hanning window of length ‘n’ are computed according to the formula w(i) = 0.5 - 0.5*cos(2*pi*i/(n-1))"
    },
    {
        "name": "hclust.bclust",
        "language": "r",
        "package": "e1071",
        "description": "Cluster the data in ‘x’ using the bagged clustering algorithm. A partitioning cluster algorithm such as ‘kmeans’ is run repeatedly on bootstrap samples from the original data. The resulting cluster centers are then combined using the hierarchical cluster algorithm ‘hclust’."
    },
    {
        "name": "hsv_palette",
        "language": "r",
        "package": "e1071",
        "description": "Computes a sequential color palette based on HSV colors by varying the saturation, given hue and value."
    },
    {
        "name": "ica",
        "language": "r",
        "package": "e1071",
        "description": "This is an R-implementation of the Matlab-Function of Petteri.Pajunen@hut.fi. For a data matrix X independent components are extracted by applying a nonlinear PCA algorithm. The parameter ‘fun’ determines which nonlinearity is used. ‘fun’ can either be a function or one of the following strings \"negative kurtosis\", \"positive kurtosis\", \"4th moment\" which can be abbreviated to uniqueness. If ‘fun’ equals \"negative (positive) kurtosis\" the function tanh (x-tanh(x)) is used which provides ICA for sources with negative (positive) kurtosis. For ‘fun == \"4th moments\"’ the signed square function is used."
    },
    {
        "name": "impute",
        "language": "r",
        "package": "e1071",
        "description": "Replaces missing values of a matrix or dataframe with the medians (‘what=\"median\"’) or means (‘what=\"mean\"’) of the respective columns."
    },
    {
        "name": "interpolate",
        "language": "r",
        "package": "e1071",
        "description": "For each row in matrix ‘x’, the hypercube of ‘a’ containing this point is searched. The corners of the hypercube are linearly interpolated. By default, ‘dimnames(a)’ is taken to contain the coordinate values for each point in ‘a’. This can be overridden using ‘adims’. If ‘method==\"constant\"’, the value of the ``lower left'' corner of the hypercube is returned."
    },
    {
        "name": "kurtosis",
        "language": "r",
        "package": "e1071",
        "description": "Computes the kurtosis."
    },
    {
        "name": "lca",
        "language": "r",
        "package": "e1071",
        "description": "A latent class analysis with ‘k’ classes is performed on the data given by ‘x’."
    },
    {
        "name": "matchClasses",
        "language": "r",
        "package": "e1071",
        "description": "Try to find a mapping between the two groupings, such that as many cases as possible are in one of the matched pairs."
    },
    {
        "name": "matchControls",
        "language": "r",
        "package": "e1071",
        "description": "Finds controls matching the cases as good as possible."
    },
    {
        "name": "moment",
        "language": "r",
        "package": "e1071",
        "description": "Computes the (optionally centered and/or absolute) sample moment of a certain order."
    },
    {
        "name": "naiveBayes",
        "language": "r",
        "package": "e1071",
        "description": "Computes the conditional a-posterior probabilities of a categorical class variable given independent predictor variables using the Bayes rule."
    },
    {
        "name": "pdiscrete",
        "language": "r",
        "package": "e1071",
        "description": "These functions provide information about the discrete distribution where the probability of the elements of ‘values’ is proportional to the values given in ‘probs’, which are normalized to sum up to 1. ‘ddiscrete’ gives the density, ‘pdiscrete’ gives the distribution function, ‘qdiscrete’ gives the quantile function and ‘rdiscrete’ generates random deviates."
    },
    {
        "name": "permutations",
        "language": "r",
        "package": "e1071",
        "description": "Returns a matrix containing all permutations of the integers ‘1:n’ (one permutation per row)."
    },
    {
        "name": "probplot",
        "language": "r",
        "package": "e1071",
        "description": "Generates a probability plot for a specified theoretical distribution, i.e., basically a ‘qqplot’ where the y-axis is labeled with probabilities instead of quantiles. The function is mainly intended for teaching the concept of quantile plots."
    },
    {
        "name": "qdiscrete",
        "language": "r",
        "package": "e1071",
        "description": "These functions provide information about the discrete distribution where the probability of the elements of ‘values’ is proportional to the values given in ‘probs’, which are normalized to sum up to 1. ‘ddiscrete’ gives the density, ‘pdiscrete’ gives the distribution function, ‘qdiscrete’ gives the quantile function and ‘rdiscrete’ generates random deviates."
    },
    {
        "name": "rbridge",
        "language": "r",
        "package": "e1071",
        "description": "‘rwiener’ returns a time series containing a simulated realization of the Brownian bridge on the interval [0,‘end’]. If W(t) is a Wiener process, then the Brownian bridge is defined as W(t) - t W(1)."
    },
    {
        "name": "rdiscrete",
        "language": "r",
        "package": "e1071",
        "description": "These functions provide information about the discrete distribution where the probability of the elements of ‘values’ is proportional to the values given in ‘probs’, which are normalized to sum up to 1. ‘ddiscrete’ gives the density, ‘pdiscrete’ gives the distribution function, ‘qdiscrete’ gives the quantile function and ‘rdiscrete’ generates random deviates."
    },
    {
        "name": "read.matrix.csr",
        "language": "r",
        "package": "e1071",
        "description": "reads and writes a file in sparse data format."
    },
    {
        "name": "rectangle.window",
        "language": "r",
        "package": "e1071",
        "description": "Returns the filter coefficients of a rectangle window. That is a vector of ‘n’ 1. The purpose of this function is just to have a name for the R command ‘rep (1, n)’."
    },
    {
        "name": "rwiener",
        "language": "r",
        "package": "e1071",
        "description": "‘rwiener’ returns a time series containing a simulated realization of the Wiener process on the interval [0,‘end’]"
    },
    {
        "name": "scale_data_frame",
        "language": "r",
        "package": "e1071",
        "description": "‘scale_data_frame’ centers and/or scales the columns of a data frame (or matrix)."
    },
    {
        "name": "sigmoid",
        "language": "r",
        "package": "e1071",
        "description": "Sigmoid 1/(1 + exp(-x)), first and second derivative."
    },
    {
        "name": "skewness",
        "language": "r",
        "package": "e1071",
        "description": "Computes the skewness."
    },
    {
        "name": "stft",
        "language": "r",
        "package": "e1071",
        "description": "This function computes the Short Time Fourier Transform of a given vector ‘X’. First, time-slices of length ‘win’ are extracted from the vector. The shift of one time-slice to the next one is given by ‘inc’. The values of these time-slices are smoothed by mulitplying them with a window function specified in ‘wtype’. For the thus obtained windows, the Fast Fourier Transform is computed."
    },
    {
        "name": "svm",
        "language": "r",
        "package": "e1071",
        "description": "‘svm’ is used to train a support vector machine. It can be used to carry out general regression and classification (of nu and epsilon-type), as well as density-estimation. A formula interface is provided."
    },
    {
        "name": "tune",
        "language": "r",
        "package": "e1071",
        "description": "This generic function tunes hyperparameters of statistical methods using a grid search over supplied parameter ranges."
    },
    {
        "name": "tune.control",
        "language": "r",
        "package": "e1071",
        "description": "Creates an object of class ‘tune.control’ to be used with the ‘tune’ function, containing various control parameters."
    },
    {
        "name": "tune.gknn",
        "language": "r",
        "package": "e1071",
        "description": "Convenience tuning wrapper functions, using ‘tune’."
    },
    {
        "name": "tune.knn",
        "language": "r",
        "package": "e1071",
        "description": "Convenience tuning wrapper functions, using ‘tune’."
    },
    {
        "name": "tune.nnet",
        "language": "r",
        "package": "e1071",
        "description": "Convenience tuning wrapper functions, using ‘tune’."
    },
    {
        "name": "tune.randomForest",
        "language": "r",
        "package": "e1071",
        "description": "Convenience tuning wrapper functions, using ‘tune’."
    },
    {
        "name": "tune.rpart",
        "language": "r",
        "package": "e1071",
        "description": "Convenience tuning wrapper functions, using ‘tune’."
    },
    {
        "name": "tune.svm",
        "language": "r",
        "package": "e1071",
        "description": "Convenience tuning wrapper functions, using ‘tune’."
    },
    {
        "name": "write.matrix.csr",
        "language": "r",
        "package": "e1071",
        "description": "reads and writes a file in sparse data format."
    },
    {
        "name": "write.svm",
        "language": "r",
        "package": "e1071",
        "description": "This function exports an SVM object (trained by ‘svm’) to two specified files. One is in the format that the function 'svm_load_model()' of libsvm can read. The other is for scaling data, containing a data with centers and scales for all variables."
    },
    {
        "name": "BoxCoxTrans",
        "language": "r",
        "package": "caret",
        "description": "These classes can be used to estimate transformations and apply them to existing and future data"
    },
    {
        "name": "F_meas",
        "language": "r",
        "package": "caret",
        "description": "These functions calculate the recall, precision or F values of a measurement system for finding/retrieving relevant documents compared to reference results (the truth regarding relevance). The measurement and \"truth\" data must have the same two possible outcomes and one of the outcomes must be thought of as a \"relevant\" results."
    },
    {
        "name": "LPH07_1",
        "language": "r",
        "package": "caret",
        "description": "This function simulates regression and classification data with truly important predictors and irrelevant predictions."
    },
    {
        "name": "LPH07_2",
        "language": "r",
        "package": "caret",
        "description": "This function simulates regression and classification data with truly important predictors and irrelevant predictions."
    },
    {
        "name": "MAE",
        "language": "r",
        "package": "caret",
        "description": "Given two numeric vectors of data, the mean squared error and R-squared are calculated. For two factors, the overall agreement rate and Kappa are determined."
    },
    {
        "name": "MeanSD",
        "language": "r",
        "package": "caret",
        "description": "Internal functions"
    },
    {
        "name": "R2",
        "language": "r",
        "package": "caret",
        "description": "Given two numeric vectors of data, the mean squared error and R-squared are calculated. For two factors, the overall agreement rate and Kappa are determined."
    },
    {
        "name": "RMSE",
        "language": "r",
        "package": "caret",
        "description": "Given two numeric vectors of data, the mean squared error and R-squared are calculated. For two factors, the overall agreement rate and Kappa are determined."
    },
    {
        "name": "SLC14_1",
        "language": "r",
        "package": "caret",
        "description": "This function simulates regression and classification data with truly important predictors and irrelevant predictions."
    },
    {
        "name": "SLC14_2",
        "language": "r",
        "package": "caret",
        "description": "This function simulates regression and classification data with truly important predictors and irrelevant predictions."
    },
    {
        "name": "anovaScores",
        "language": "r",
        "package": "caret",
        "description": "Ancillary functions for univariate feature selection"
    },
    {
        "name": "avNNet",
        "language": "r",
        "package": "caret",
        "description": "Aggregate several neural network models"
    },
    {
        "name": "bag",
        "language": "r",
        "package": "caret",
        "description": "‘bag’ provides a framework for bagging classification or regression models. The user can provide their own functions for model building, prediction and aggregation of predictions (see Details below)."
    },
    {
        "name": "bagControl",
        "language": "r",
        "package": "caret",
        "description": "‘bag’ provides a framework for bagging classification or regression models. The user can provide their own functions for model building, prediction and aggregation of predictions (see Details below)."
    },
    {
        "name": "bagEarth",
        "language": "r",
        "package": "caret",
        "description": "A bagging wrapper for multivariate adaptive regression splines (MARS) via the ‘earth’ function"
    },
    {
        "name": "bagEarthStats",
        "language": "r",
        "package": "caret",
        "description": "Internal functions"
    },
    {
        "name": "bagFDA",
        "language": "r",
        "package": "caret",
        "description": "A bagging wrapper for flexible discriminant analysis (FDA) using multivariate adaptive regression splines (MARS) basis functions"
    },
    {
        "name": "best",
        "language": "r",
        "package": "caret",
        "description": "Various functions for setting tuning parameters"
    },
    {
        "name": "calibration",
        "language": "r",
        "package": "caret",
        "description": "For classification models, this function creates a 'calibration plot' that describes how consistent model probabilities are with observed event rates."
    },
    {
        "name": "caretTheme",
        "language": "r",
        "package": "caret",
        "description": "Internal functions"
    },
    {
        "name": "cforestStats",
        "language": "r",
        "package": "caret",
        "description": "Internal functions"
    },
    {
        "name": "checkConditionalX",
        "language": "r",
        "package": "caret",
        "description": "‘nearZeroVar’ diagnoses predictors that have one unique value (i.e. are zero variance predictors) or predictors that are have both of the following characteristics: they have very few unique values relative to the number of samples and the ratio of the frequency of the most common value to the frequency of the second most common value is large. ‘checkConditionalX’ looks at the distribution of the columns of ‘x’ conditioned on the levels of ‘y’ and identifies columns of ‘x’ that are sparse within groups of ‘y’."
    },
    {
        "name": "checkInstall",
        "language": "r",
        "package": "caret",
        "description": "These function show information about models and packages that are accessible via ‘train’"
    },
    {
        "name": "checkResamples",
        "language": "r",
        "package": "caret",
        "description": "‘nearZeroVar’ diagnoses predictors that have one unique value (i.e. are zero variance predictors) or predictors that are have both of the following characteristics: they have very few unique values relative to the number of samples and the ratio of the frequency of the most common value to the frequency of the second most common value is large. ‘checkConditionalX’ looks at the distribution of the columns of ‘x’ conditioned on the levels of ‘y’ and identifies columns of ‘x’ that are sparse within groups of ‘y’."
    },
    {
        "name": "class2ind",
        "language": "r",
        "package": "caret",
        "description": "‘dummyVars’ creates a full set of dummy variables (i.e. less than full rank parameterization)"
    },
    {
        "name": "classDist",
        "language": "r",
        "package": "caret",
        "description": "This function computes the class centroids and covariance matrix for a training set for determining Mahalanobis distances of samples to each class centroid."
    },
    {
        "name": "cluster",
        "language": "r",
        "package": "caret",
        "description": "Performs a principal components analysis on an object of class ‘resamples’ and returns the results as an object with classes ‘prcomp.resamples’ and ‘prcomp’."
    },
    {
        "name": "compare_models",
        "language": "r",
        "package": "caret",
        "description": "Methods for making inferences about differences between models"
    },
    {
        "name": "confusionMatrix",
        "language": "r",
        "package": "caret",
        "description": "Calculates a cross-tabulation of observed and predicted classes with associated statistics."
    },
    {
        "name": "confusionMatrix.train",
        "language": "r",
        "package": "caret",
        "description": "Using a ‘train’, ‘rfe’, ‘sbf’ object, determine a confusion matrix based on the resampling procedure"
    },
    {
        "name": "contr.dummy",
        "language": "r",
        "package": "caret",
        "description": "‘dummyVars’ creates a full set of dummy variables (i.e. less than full rank parameterization)"
    },
    {
        "name": "contr.ltfr",
        "language": "r",
        "package": "caret",
        "description": "‘dummyVars’ creates a full set of dummy variables (i.e. less than full rank parameterization)"
    },
    {
        "name": "createDataPartition",
        "language": "r",
        "package": "caret",
        "description": "A series of test/training partitions are created using ‘createDataPartition’ while ‘createResample’ creates one or more bootstrap samples. ‘createFolds’ splits the data into ‘k’ groups while ‘createTimeSlices’ creates cross-validation split for series data. ‘groupKFold’ splits the data based on a grouping factor."
    },
    {
        "name": "createFolds",
        "language": "r",
        "package": "caret",
        "description": "A series of test/training partitions are created using ‘createDataPartition’ while ‘createResample’ creates one or more bootstrap samples. ‘createFolds’ splits the data into ‘k’ groups while ‘createTimeSlices’ creates cross-validation split for series data. ‘groupKFold’ splits the data based on a grouping factor."
    },
    {
        "name": "createModel",
        "language": "r",
        "package": "caret",
        "description": "Internal functions"
    },
    {
        "name": "createMultiFolds",
        "language": "r",
        "package": "caret",
        "description": "A series of test/training partitions are created using ‘createDataPartition’ while ‘createResample’ creates one or more bootstrap samples. ‘createFolds’ splits the data into ‘k’ groups while ‘createTimeSlices’ creates cross-validation split for series data. ‘groupKFold’ splits the data based on a grouping factor."
    },
    {
        "name": "createResample",
        "language": "r",
        "package": "caret",
        "description": "A series of test/training partitions are created using ‘createDataPartition’ while ‘createResample’ creates one or more bootstrap samples. ‘createFolds’ splits the data into ‘k’ groups while ‘createTimeSlices’ creates cross-validation split for series data. ‘groupKFold’ splits the data based on a grouping factor."
    },
    {
        "name": "createTimeSlices",
        "language": "r",
        "package": "caret",
        "description": "A series of test/training partitions are created using ‘createDataPartition’ while ‘createResample’ creates one or more bootstrap samples. ‘createFolds’ splits the data into ‘k’ groups while ‘createTimeSlices’ creates cross-validation split for series data. ‘groupKFold’ splits the data based on a grouping factor."
    },
    {
        "name": "defaultSummary",
        "language": "r",
        "package": "caret",
        "description": "Given two numeric vectors of data, the mean squared error and R-squared are calculated. For two factors, the overall agreement rate and Kappa are determined."
    },
    {
        "name": "dotPlot",
        "language": "r",
        "package": "caret",
        "description": "A lattice ‘dotplot’ is created from an object of class ‘varImp.train’."
    },
    {
        "name": "downSample",
        "language": "r",
        "package": "caret",
        "description": "‘downSample’ will randomly sample a data set so that all classes have the same frequency as the minority class. ‘upSample’ samples with replacement to make the class distributions equal"
    },
    {
        "name": "dummyVars",
        "language": "r",
        "package": "caret",
        "description": "‘dummyVars’ creates a full set of dummy variables (i.e. less than full rank parameterization)"
    },
    {
        "name": "expandParameters",
        "language": "r",
        "package": "caret",
        "description": "Internal functions"
    },
    {
        "name": "expoTrans",
        "language": "r",
        "package": "caret",
        "description": "These classes can be used to estimate transformations and apply them to existing and future data"
    },
    {
        "name": "extractPrediction",
        "language": "r",
        "package": "caret",
        "description": "These functions can be used for a single ‘train’ object or to loop through a number of ‘train’ objects to calculate the training and test data predictions and class probabilities."
    },
    {
        "name": "extractProb",
        "language": "r",
        "package": "caret",
        "description": "These functions can be used for a single ‘train’ object or to loop through a number of ‘train’ objects to calculate the training and test data predictions and class probabilities."
    },
    {
        "name": "featurePlot",
        "language": "r",
        "package": "caret",
        "description": "A shortcut to produce lattice graphs"
    },
    {
        "name": "filterVarImp",
        "language": "r",
        "package": "caret",
        "description": "Specific engines for variable importance on a model by model basis."
    },
    {
        "name": "findCorrelation",
        "language": "r",
        "package": "caret",
        "description": "This function searches through a correlation matrix and returns a vector of integers corresponding to columns to remove to reduce pair-wise correlations."
    },
    {
        "name": "findLinearCombos",
        "language": "r",
        "package": "caret",
        "description": "Enumerate and resolve the linear combinations in a numeric matrix"
    },
    {
        "name": "flatTable",
        "language": "r",
        "package": "caret",
        "description": "Internal functions"
    },
    {
        "name": "gafs",
        "language": "r",
        "package": "caret",
        "description": "Supervised feature selection using genetic algorithms"
    },
    {
        "name": "gafs.default",
        "language": "r",
        "package": "caret",
        "description": "Supervised feature selection using genetic algorithms"
    },
    {
        "name": "gafsControl",
        "language": "r",
        "package": "caret",
        "description": "Control the computational nuances of the ‘gafs’ and ‘safs’ functions Many of these options are the same as those described for ‘trainControl’. More extensive documentation and examples can be found on the ‘caret’ website at <http://topepo.github.io/caret/feature-selection-using-genetic-algorithms.html#syntax> and <http://topepo.github.io/caret/feature-selection-using-simulated-annealing.html#syntax>. The ‘functions’ component contains the information about how the model should be fit and summarized. It also contains the elements needed for the GA and SA modules (e.g. cross-over, etc). The elements of ‘functions’ that are the same for GAs and SAs are: • ‘fit’, with arguments ‘x’, ‘y’, ‘lev’, ‘last’, and ‘...’, is used to fit the classification or regression model • ‘pred’, with arguments ‘object’ and ‘x’, predicts new samples • ‘fitness_intern’, with arguments ‘object’, ‘x’, ‘y’, ‘maximize’, and ‘p’, summarizes performance for the internal estimates of fitness • ‘fitness_extern’, with arguments ‘data’, ‘lev’, and ‘model’, summarizes performance using the externally held-out samples • ‘selectIter’, with arguments ‘x’, ‘metric’, and ‘maximize’, determines the best search iteration for feature selection. The elements of ‘functions’ specific to genetic algorithms are: • ‘initial’, with arguments ‘vars’, ‘popSize’ and ‘...’, creates an initial population. • ‘selection’, with arguments ‘population’, ‘fitness’, ‘r’, ‘q’, and ‘...’, conducts selection of individuals. • ‘crossover’, with arguments ‘population’, ‘fitness’, ‘parents’ and ‘...’, control genetic reproduction. • ‘mutation’, with arguments ‘population’, ‘parent’ and ‘...’, adds mutations. The elements of ‘functions’ specific to simulated annealing are: • ‘initial’, with arguments ‘vars’, ‘prob’, and ‘...’, creates the initial subset. • ‘perturb’, with arguments ‘x’, ‘vars’, and ‘number’, makes incremental changes to the subsets. • ‘prob’, with arguments ‘old’, ‘new’, and ‘iteration’, computes the acceptance probabilities The pages <http://topepo.github.io/caret/feature-selection-using-genetic-algorithms.html> and <http://topepo.github.io/caret/feature-selection-using-simulated-annealing.html> have more details about each of these functions. ‘holdout’ can be used to hold out samples for computing the internal fitness value. Note that this is independent of the external resampling step. Suppose 10-fold CV is being used. Within a resampling iteration, ‘holdout’ can be used to sample an additional proportion of the 90% resampled data to use for estimating fitness. This may not be a good idea unless you have a very large training set and want to avoid an internal resampling procedure to estimate fitness. The search algorithms can be parallelized in several places: 1. each externally resampled GA or SA can be run independently (controlled by the ‘allowParallel’ options) 2. within a GA, the fitness calculations at a particular generation can be run in parallel over the current set of individuals (see the ‘genParallel’) 3. if inner resampling is used, these can be run in parallel (controls depend on the function used. See, for example, ‘trainControl’) 4. any parallelization of the individual model fits. This is also specific to the modeling function. It is probably best to pick one of these areas for parallelization and the first is likely to produces the largest decrease in run-time since it is the least likely to incur multiple re-starting of the worker processes. Keep in mind that if multiple levels of parallelization occur, this can effect the number of workers and the amount of memory required exponentially."
    },
    {
        "name": "gafs_initial",
        "language": "r",
        "package": "caret",
        "description": "Built-in functions related to genetic algorithms These functions are used with the ‘functions’ argument of the ‘gafsControl’ function. More information on the details of these functions are at <http://topepo.github.io/caret/feature-selection-using-genetic-algorithms.html>. Most of the ‘gafs_*’ functions are based on those from the GA package by Luca Scrucca. These functions here are small re-writes to work outside of the GA package. The objects ‘caretGA’, ‘rfGA’ and ‘treebagGA’ are example lists that can be used with the ‘functions’ argument of ‘gafsControl’. In the case of ‘caretGA’, the ‘...’ structure of ‘gafs’ passes through to the model fitting routine. As a consequence, the ‘train’ function can easily be accessed by passing important arguments belonging to ‘train’ to ‘gafs’. See the examples below. By default, using ‘caretGA’ will used the resampled performance estimates produced by ‘train’ as the internal estimate of fitness. For ‘rfGA’ and ‘treebagGA’, the ‘randomForest’ and ‘bagging’ functions are used directly (i.e. ‘train’ is not used). Arguments to either of these functions can also be passed to them though the ‘gafs’ call (see examples below). For these two functions, the internal fitness is estimated using the out-of-bag estimates naturally produced by those functions. While faster, this limits the user to accuracy or Kappa (for classification) and RMSE and R-squared (for regression)."
    },
    {
        "name": "gafs_lrSelection",
        "language": "r",
        "package": "caret",
        "description": "Built-in functions related to genetic algorithms These functions are used with the ‘functions’ argument of the ‘gafsControl’ function. More information on the details of these functions are at <http://topepo.github.io/caret/feature-selection-using-genetic-algorithms.html>. Most of the ‘gafs_*’ functions are based on those from the GA package by Luca Scrucca. These functions here are small re-writes to work outside of the GA package. The objects ‘caretGA’, ‘rfGA’ and ‘treebagGA’ are example lists that can be used with the ‘functions’ argument of ‘gafsControl’. In the case of ‘caretGA’, the ‘...’ structure of ‘gafs’ passes through to the model fitting routine. As a consequence, the ‘train’ function can easily be accessed by passing important arguments belonging to ‘train’ to ‘gafs’. See the examples below. By default, using ‘caretGA’ will used the resampled performance estimates produced by ‘train’ as the internal estimate of fitness. For ‘rfGA’ and ‘treebagGA’, the ‘randomForest’ and ‘bagging’ functions are used directly (i.e. ‘train’ is not used). Arguments to either of these functions can also be passed to them though the ‘gafs’ call (see examples below). For these two functions, the internal fitness is estimated using the out-of-bag estimates naturally produced by those functions. While faster, this limits the user to accuracy or Kappa (for classification) and RMSE and R-squared (for regression)."
    },
    {
        "name": "gafs_raMutation",
        "language": "r",
        "package": "caret",
        "description": "Built-in functions related to genetic algorithms These functions are used with the ‘functions’ argument of the ‘gafsControl’ function. More information on the details of these functions are at <http://topepo.github.io/caret/feature-selection-using-genetic-algorithms.html>. Most of the ‘gafs_*’ functions are based on those from the GA package by Luca Scrucca. These functions here are small re-writes to work outside of the GA package. The objects ‘caretGA’, ‘rfGA’ and ‘treebagGA’ are example lists that can be used with the ‘functions’ argument of ‘gafsControl’. In the case of ‘caretGA’, the ‘...’ structure of ‘gafs’ passes through to the model fitting routine. As a consequence, the ‘train’ function can easily be accessed by passing important arguments belonging to ‘train’ to ‘gafs’. See the examples below. By default, using ‘caretGA’ will used the resampled performance estimates produced by ‘train’ as the internal estimate of fitness. For ‘rfGA’ and ‘treebagGA’, the ‘randomForest’ and ‘bagging’ functions are used directly (i.e. ‘train’ is not used). Arguments to either of these functions can also be passed to them though the ‘gafs’ call (see examples below). For these two functions, the internal fitness is estimated using the out-of-bag estimates naturally produced by those functions. While faster, this limits the user to accuracy or Kappa (for classification) and RMSE and R-squared (for regression)."
    },
    {
        "name": "gafs_rwSelection",
        "language": "r",
        "package": "caret",
        "description": "Built-in functions related to genetic algorithms These functions are used with the ‘functions’ argument of the ‘gafsControl’ function. More information on the details of these functions are at <http://topepo.github.io/caret/feature-selection-using-genetic-algorithms.html>. Most of the ‘gafs_*’ functions are based on those from the GA package by Luca Scrucca. These functions here are small re-writes to work outside of the GA package. The objects ‘caretGA’, ‘rfGA’ and ‘treebagGA’ are example lists that can be used with the ‘functions’ argument of ‘gafsControl’. In the case of ‘caretGA’, the ‘...’ structure of ‘gafs’ passes through to the model fitting routine. As a consequence, the ‘train’ function can easily be accessed by passing important arguments belonging to ‘train’ to ‘gafs’. See the examples below. By default, using ‘caretGA’ will used the resampled performance estimates produced by ‘train’ as the internal estimate of fitness. For ‘rfGA’ and ‘treebagGA’, the ‘randomForest’ and ‘bagging’ functions are used directly (i.e. ‘train’ is not used). Arguments to either of these functions can also be passed to them though the ‘gafs’ call (see examples below). For these two functions, the internal fitness is estimated using the out-of-bag estimates naturally produced by those functions. While faster, this limits the user to accuracy or Kappa (for classification) and RMSE and R-squared (for regression)."
    },
    {
        "name": "gafs_spCrossover",
        "language": "r",
        "package": "caret",
        "description": "Built-in functions related to genetic algorithms These functions are used with the ‘functions’ argument of the ‘gafsControl’ function. More information on the details of these functions are at <http://topepo.github.io/caret/feature-selection-using-genetic-algorithms.html>. Most of the ‘gafs_*’ functions are based on those from the GA package by Luca Scrucca. These functions here are small re-writes to work outside of the GA package. The objects ‘caretGA’, ‘rfGA’ and ‘treebagGA’ are example lists that can be used with the ‘functions’ argument of ‘gafsControl’. In the case of ‘caretGA’, the ‘...’ structure of ‘gafs’ passes through to the model fitting routine. As a consequence, the ‘train’ function can easily be accessed by passing important arguments belonging to ‘train’ to ‘gafs’. See the examples below. By default, using ‘caretGA’ will used the resampled performance estimates produced by ‘train’ as the internal estimate of fitness. For ‘rfGA’ and ‘treebagGA’, the ‘randomForest’ and ‘bagging’ functions are used directly (i.e. ‘train’ is not used). Arguments to either of these functions can also be passed to them though the ‘gafs’ call (see examples below). For these two functions, the internal fitness is estimated using the out-of-bag estimates naturally produced by those functions. While faster, this limits the user to accuracy or Kappa (for classification) and RMSE and R-squared (for regression)."
    },
    {
        "name": "gafs_tourSelection",
        "language": "r",
        "package": "caret",
        "description": "Built-in functions related to genetic algorithms These functions are used with the ‘functions’ argument of the ‘gafsControl’ function. More information on the details of these functions are at <http://topepo.github.io/caret/feature-selection-using-genetic-algorithms.html>. Most of the ‘gafs_*’ functions are based on those from the GA package by Luca Scrucca. These functions here are small re-writes to work outside of the GA package. The objects ‘caretGA’, ‘rfGA’ and ‘treebagGA’ are example lists that can be used with the ‘functions’ argument of ‘gafsControl’. In the case of ‘caretGA’, the ‘...’ structure of ‘gafs’ passes through to the model fitting routine. As a consequence, the ‘train’ function can easily be accessed by passing important arguments belonging to ‘train’ to ‘gafs’. See the examples below. By default, using ‘caretGA’ will used the resampled performance estimates produced by ‘train’ as the internal estimate of fitness. For ‘rfGA’ and ‘treebagGA’, the ‘randomForest’ and ‘bagging’ functions are used directly (i.e. ‘train’ is not used). Arguments to either of these functions can also be passed to them though the ‘gafs’ call (see examples below). For these two functions, the internal fitness is estimated using the out-of-bag estimates naturally produced by those functions. While faster, this limits the user to accuracy or Kappa (for classification) and RMSE and R-squared (for regression)."
    },
    {
        "name": "gafs_uCrossover",
        "language": "r",
        "package": "caret",
        "description": "Built-in functions related to genetic algorithms These functions are used with the ‘functions’ argument of the ‘gafsControl’ function. More information on the details of these functions are at <http://topepo.github.io/caret/feature-selection-using-genetic-algorithms.html>. Most of the ‘gafs_*’ functions are based on those from the GA package by Luca Scrucca. These functions here are small re-writes to work outside of the GA package. The objects ‘caretGA’, ‘rfGA’ and ‘treebagGA’ are example lists that can be used with the ‘functions’ argument of ‘gafsControl’. In the case of ‘caretGA’, the ‘...’ structure of ‘gafs’ passes through to the model fitting routine. As a consequence, the ‘train’ function can easily be accessed by passing important arguments belonging to ‘train’ to ‘gafs’. See the examples below. By default, using ‘caretGA’ will used the resampled performance estimates produced by ‘train’ as the internal estimate of fitness. For ‘rfGA’ and ‘treebagGA’, the ‘randomForest’ and ‘bagging’ functions are used directly (i.e. ‘train’ is not used). Arguments to either of these functions can also be passed to them though the ‘gafs’ call (see examples below). For these two functions, the internal fitness is estimated using the out-of-bag estimates naturally produced by those functions. While faster, this limits the user to accuracy or Kappa (for classification) and RMSE and R-squared (for regression)."
    },
    {
        "name": "gamFormula",
        "language": "r",
        "package": "caret",
        "description": "Internal functions"
    },
    {
        "name": "gamScores",
        "language": "r",
        "package": "caret",
        "description": "Ancillary functions for univariate feature selection"
    },
    {
        "name": "getModelInfo",
        "language": "r",
        "package": "caret",
        "description": "These function show information about models and packages that are accessible via ‘train’"
    },
    {
        "name": "getSamplingInfo",
        "language": "r",
        "package": "caret",
        "description": "Placeholder."
    },
    {
        "name": "getTrainPerf",
        "language": "r",
        "package": "caret",
        "description": "Given two numeric vectors of data, the mean squared error and R-squared are calculated. For two factors, the overall agreement rate and Kappa are determined."
    },
    {
        "name": "ggplot.gafs",
        "language": "r",
        "package": "caret",
        "description": "Plot the performance values versus search iteration"
    },
    {
        "name": "ggplot.safs",
        "language": "r",
        "package": "caret",
        "description": "Plot the performance values versus search iteration"
    },
    {
        "name": "groupKFold",
        "language": "r",
        "package": "caret",
        "description": "A series of test/training partitions are created using ‘createDataPartition’ while ‘createResample’ creates one or more bootstrap samples. ‘createFolds’ splits the data into ‘k’ groups while ‘createTimeSlices’ creates cross-validation split for series data. ‘groupKFold’ splits the data based on a grouping factor."
    },
    {
        "name": "hasTerms",
        "language": "r",
        "package": "caret",
        "description": "Internal functions"
    },
    {
        "name": "icr",
        "language": "r",
        "package": "caret",
        "description": "Fit a linear regression model using independent components"
    },
    {
        "name": "index2vec",
        "language": "r",
        "package": "caret",
        "description": "The function performs the opposite of ‘which’ converting a set of integers to a binary vector"
    },
    {
        "name": "ipredStats",
        "language": "r",
        "package": "caret",
        "description": "Internal functions"
    },
    {
        "name": "knn3",
        "language": "r",
        "package": "caret",
        "description": "$k$-nearest neighbour classification that can return class votes for all classes."
    },
    {
        "name": "knn3Train",
        "language": "r",
        "package": "caret",
        "description": "$k$-nearest neighbour classification that can return class votes for all classes."
    },
    {
        "name": "knnreg",
        "language": "r",
        "package": "caret",
        "description": "$k$-nearest neighbour regression that can return the average value for the neighbours."
    },
    {
        "name": "knnregTrain",
        "language": "r",
        "package": "caret",
        "description": "$k$-nearest neighbour regression that can return the average value for the neighbours."
    },
    {
        "name": "learning_curve_dat",
        "language": "r",
        "package": "caret",
        "description": "For a given model, this function fits several versions on different sizes of the total training set and returns the results"
    },
    {
        "name": "lift",
        "language": "r",
        "package": "caret",
        "description": "For classification models, this function creates a 'lift plot' that describes how well a model ranks samples for one class"
    },
    {
        "name": "maxDissim",
        "language": "r",
        "package": "caret",
        "description": "Functions to create a sub-sample by maximizing the dissimilarity between new samples and the existing subset."
    },
    {
        "name": "minDiss",
        "language": "r",
        "package": "caret",
        "description": "Functions to create a sub-sample by maximizing the dissimilarity between new samples and the existing subset."
    },
    {
        "name": "mnLogLoss",
        "language": "r",
        "package": "caret",
        "description": "Given two numeric vectors of data, the mean squared error and R-squared are calculated. For two factors, the overall agreement rate and Kappa are determined."
    },
    {
        "name": "modelCor",
        "language": "r",
        "package": "caret",
        "description": "These functions provide methods for collection, analyzing and visualizing a set of resampling results from a common data set."
    },
    {
        "name": "modelLookup",
        "language": "r",
        "package": "caret",
        "description": "These function show information about models and packages that are accessible via ‘train’"
    },
    {
        "name": "multiClassSummary",
        "language": "r",
        "package": "caret",
        "description": "Given two numeric vectors of data, the mean squared error and R-squared are calculated. For two factors, the overall agreement rate and Kappa are determined."
    },
    {
        "name": "nearZeroVar",
        "language": "r",
        "package": "caret",
        "description": "‘nearZeroVar’ diagnoses predictors that have one unique value (i.e. are zero variance predictors) or predictors that are have both of the following characteristics: they have very few unique values relative to the number of samples and the ratio of the frequency of the most common value to the frequency of the second most common value is large. ‘checkConditionalX’ looks at the distribution of the columns of ‘x’ conditioned on the levels of ‘y’ and identifies columns of ‘x’ that are sparse within groups of ‘y’."
    },
    {
        "name": "negPredValue",
        "language": "r",
        "package": "caret",
        "description": "These functions calculate the sensitivity, specificity or predictive values of a measurement system compared to a reference results (the truth or a gold standard). The measurement and \"truth\" data must have the same two possible outcomes and one of the outcomes must be thought of as a \"positive\" results."
    },
    {
        "name": "nullModel",
        "language": "r",
        "package": "caret",
        "description": "Fit a single mean or largest class model"
    },
    {
        "name": "nzv",
        "language": "r",
        "package": "caret",
        "description": "‘nearZeroVar’ diagnoses predictors that have one unique value (i.e. are zero variance predictors) or predictors that are have both of the following characteristics: they have very few unique values relative to the number of samples and the ratio of the frequency of the most common value to the frequency of the second most common value is large. ‘checkConditionalX’ looks at the distribution of the columns of ‘x’ conditioned on the levels of ‘y’ and identifies columns of ‘x’ that are sparse within groups of ‘y’."
    },
    {
        "name": "oneSE",
        "language": "r",
        "package": "caret",
        "description": "Various functions for setting tuning parameters"
    },
    {
        "name": "outcome_conversion",
        "language": "r",
        "package": "caret",
        "description": "Internal functions"
    },
    {
        "name": "panel.calibration",
        "language": "r",
        "package": "caret",
        "description": "For classification models, this function creates a 'calibration plot' that describes how consistent model probabilities are with observed event rates."
    },
    {
        "name": "panel.lift",
        "language": "r",
        "package": "caret",
        "description": "Two panel functions that be used in conjunction with ‘lift’."
    },
    {
        "name": "panel.lift2",
        "language": "r",
        "package": "caret",
        "description": "Two panel functions that be used in conjunction with ‘lift’."
    },
    {
        "name": "panel.needle",
        "language": "r",
        "package": "caret",
        "description": "A variation of ‘panel.dotplot’ that plots horizontal lines from zero to the data point."
    },
    {
        "name": "pcaNNet",
        "language": "r",
        "package": "caret",
        "description": "Run PCA on a dataset, then use it in a neural network model"
    },
    {
        "name": "pickSizeBest",
        "language": "r",
        "package": "caret",
        "description": "Ancillary functions for backwards selection"
    },
    {
        "name": "pickSizeTolerance",
        "language": "r",
        "package": "caret",
        "description": "Ancillary functions for backwards selection"
    },
    {
        "name": "pickVars",
        "language": "r",
        "package": "caret",
        "description": "Ancillary functions for backwards selection"
    },
    {
        "name": "plot.gafs",
        "language": "r",
        "package": "caret",
        "description": "Plot the performance values versus search iteration"
    },
    {
        "name": "plot.rfe",
        "language": "r",
        "package": "caret",
        "description": "These functions plot the resampling results for the candidate subset sizes evaluated during the recursive feature elimination (RFE) process"
    },
    {
        "name": "plot.safs",
        "language": "r",
        "package": "caret",
        "description": "Plot the performance values versus search iteration"
    },
    {
        "name": "plot.train",
        "language": "r",
        "package": "caret",
        "description": "This function takes the output of a ‘train’ object and creates a line or level plot using the ‘lattice’ or ‘ggplot2’ libraries."
    },
    {
        "name": "plotClassProbs",
        "language": "r",
        "package": "caret",
        "description": "This function takes an object (preferably from the function ‘extractProb’) and creates a lattice plot."
    },
    {
        "name": "plotObsVsPred",
        "language": "r",
        "package": "caret",
        "description": "This function takes an object (preferably from the function ‘extractPrediction’) and creates a lattice plot. For numeric outcomes, the observed and predicted data are plotted with a 45 degree reference line and a smoothed fit. For factor outcomes, a dotplot plot is produced with the accuracies for the different models."
    },
    {
        "name": "plsda",
        "language": "r",
        "package": "caret",
        "description": "‘plsda’ is used to fit standard PLS models for classification while ‘splsda’ performs sparse PLS that embeds feature selection and regularization for the same purpose."
    },
    {
        "name": "posPredValue",
        "language": "r",
        "package": "caret",
        "description": "These functions calculate the sensitivity, specificity or predictive values of a measurement system compared to a reference results (the truth or a gold standard). The measurement and \"truth\" data must have the same two possible outcomes and one of the outcomes must be thought of as a \"positive\" results."
    },
    {
        "name": "postResample",
        "language": "r",
        "package": "caret",
        "description": "Given two numeric vectors of data, the mean squared error and R-squared are calculated. For two factors, the overall agreement rate and Kappa are determined."
    },
    {
        "name": "prSummary",
        "language": "r",
        "package": "caret",
        "description": "Given two numeric vectors of data, the mean squared error and R-squared are calculated. For two factors, the overall agreement rate and Kappa are determined."
    },
    {
        "name": "preProcess",
        "language": "r",
        "package": "caret",
        "description": "Pre-processing transformation (centering, scaling etc.) can be estimated from the training data and applied to any data set with the same variables."
    },
    {
        "name": "precision",
        "language": "r",
        "package": "caret",
        "description": "These functions calculate the recall, precision or F values of a measurement system for finding/retrieving relevant documents compared to reference results (the truth regarding relevance). The measurement and \"truth\" data must have the same two possible outcomes and one of the outcomes must be thought of as a \"relevant\" results."
    },
    {
        "name": "predict.bagEarth",
        "language": "r",
        "package": "caret",
        "description": "Predicted values based on bagged Earth and FDA models"
    },
    {
        "name": "predict.gafs",
        "language": "r",
        "package": "caret",
        "description": "Predict new samples using ‘safs’ and ‘gafs’ objects."
    },
    {
        "name": "predict.train",
        "language": "r",
        "package": "caret",
        "description": "These functions can be used for a single ‘train’ object or to loop through a number of ‘train’ objects to calculate the training and test data predictions and class probabilities."
    },
    {
        "name": "predictionFunction",
        "language": "r",
        "package": "caret",
        "description": "Internal functions"
    },
    {
        "name": "predictors",
        "language": "r",
        "package": "caret",
        "description": "This class uses a model fit to determine which predictors were used in the final model."
    },
    {
        "name": "print.train",
        "language": "r",
        "package": "caret",
        "description": "Print the results of a ‘train’ object."
    },
    {
        "name": "probFunction",
        "language": "r",
        "package": "caret",
        "description": "Internal functions"
    },
    {
        "name": "progress",
        "language": "r",
        "package": "caret",
        "description": "Internal functions"
    },
    {
        "name": "recall",
        "language": "r",
        "package": "caret",
        "description": "These functions calculate the recall, precision or F values of a measurement system for finding/retrieving relevant documents compared to reference results (the truth regarding relevance). The measurement and \"truth\" data must have the same two possible outcomes and one of the outcomes must be thought of as a \"relevant\" results."
    },
    {
        "name": "resampleHist",
        "language": "r",
        "package": "caret",
        "description": "Create a lattice histogram or densityplot from the resampled outcomes from a ‘train’ object."
    },
    {
        "name": "resampleSummary",
        "language": "r",
        "package": "caret",
        "description": "This function uses the out-of-bag predictions to calculate overall performance metrics and returns the observed and predicted data."
    },
    {
        "name": "resampleWrapper",
        "language": "r",
        "package": "caret",
        "description": "Internal functions"
    },
    {
        "name": "resamples",
        "language": "r",
        "package": "caret",
        "description": "These functions provide methods for collection, analyzing and visualizing a set of resampling results from a common data set."
    },
    {
        "name": "rfStats",
        "language": "r",
        "package": "caret",
        "description": "Internal functions"
    },
    {
        "name": "rfe",
        "language": "r",
        "package": "caret",
        "description": "A simple backwards selection, a.k.a. recursive feature elimination (RFE), algorithm"
    },
    {
        "name": "rfeControl",
        "language": "r",
        "package": "caret",
        "description": "This function generates a control object that can be used to specify the details of the feature selection algorithms used in this package."
    },
    {
        "name": "rfeIter",
        "language": "r",
        "package": "caret",
        "description": "A simple backwards selection, a.k.a. recursive feature elimination (RFE), algorithm"
    },
    {
        "name": "safs",
        "language": "r",
        "package": "caret",
        "description": "Supervised feature selection using simulated annealing ‘safs’ conducts a supervised binary search of the predictor space using simulated annealing (SA). See Kirkpatrick et al (1983) for more information on this search algorithm."
    },
    {
        "name": "safsControl",
        "language": "r",
        "package": "caret",
        "description": "Control the computational nuances of the ‘gafs’ and ‘safs’ functions Many of these options are the same as those described for ‘trainControl’. More extensive documentation and examples can be found on the ‘caret’ website at <http://topepo.github.io/caret/feature-selection-using-genetic-algorithms.html#syntax> and <http://topepo.github.io/caret/feature-selection-using-simulated-annealing.html#syntax>. The ‘functions’ component contains the information about how the model should be fit and summarized. It also contains the elements needed for the GA and SA modules (e.g. cross-over, etc). The elements of ‘functions’ that are the same for GAs and SAs are: • ‘fit’, with arguments ‘x’, ‘y’, ‘lev’, ‘last’, and ‘...’, is used to fit the classification or regression model • ‘pred’, with arguments ‘object’ and ‘x’, predicts new samples • ‘fitness_intern’, with arguments ‘object’, ‘x’, ‘y’, ‘maximize’, and ‘p’, summarizes performance for the internal estimates of fitness • ‘fitness_extern’, with arguments ‘data’, ‘lev’, and ‘model’, summarizes performance using the externally held-out samples • ‘selectIter’, with arguments ‘x’, ‘metric’, and ‘maximize’, determines the best search iteration for feature selection. The elements of ‘functions’ specific to genetic algorithms are: • ‘initial’, with arguments ‘vars’, ‘popSize’ and ‘...’, creates an initial population. • ‘selection’, with arguments ‘population’, ‘fitness’, ‘r’, ‘q’, and ‘...’, conducts selection of individuals. • ‘crossover’, with arguments ‘population’, ‘fitness’, ‘parents’ and ‘...’, control genetic reproduction. • ‘mutation’, with arguments ‘population’, ‘parent’ and ‘...’, adds mutations. The elements of ‘functions’ specific to simulated annealing are: • ‘initial’, with arguments ‘vars’, ‘prob’, and ‘...’, creates the initial subset. • ‘perturb’, with arguments ‘x’, ‘vars’, and ‘number’, makes incremental changes to the subsets. • ‘prob’, with arguments ‘old’, ‘new’, and ‘iteration’, computes the acceptance probabilities The pages <http://topepo.github.io/caret/feature-selection-using-genetic-algorithms.html> and <http://topepo.github.io/caret/feature-selection-using-simulated-annealing.html> have more details about each of these functions. ‘holdout’ can be used to hold out samples for computing the internal fitness value. Note that this is independent of the external resampling step. Suppose 10-fold CV is being used. Within a resampling iteration, ‘holdout’ can be used to sample an additional proportion of the 90% resampled data to use for estimating fitness. This may not be a good idea unless you have a very large training set and want to avoid an internal resampling procedure to estimate fitness. The search algorithms can be parallelized in several places: 1. each externally resampled GA or SA can be run independently (controlled by the ‘allowParallel’ options) 2. within a GA, the fitness calculations at a particular generation can be run in parallel over the current set of individuals (see the ‘genParallel’) 3. if inner resampling is used, these can be run in parallel (controls depend on the function used. See, for example, ‘trainControl’) 4. any parallelization of the individual model fits. This is also specific to the modeling function. It is probably best to pick one of these areas for parallelization and the first is likely to produces the largest decrease in run-time since it is the least likely to incur multiple re-starting of the worker processes. Keep in mind that if multiple levels of parallelization occur, this can effect the number of workers and the amount of memory required exponentially."
    },
    {
        "name": "safs_initial",
        "language": "r",
        "package": "caret",
        "description": "Built-in functions related to simulated annealing These functions are used with the ‘functions’ argument of the ‘safsControl’ function. More information on the details of these functions are at <http://topepo.github.io/caret/feature-selection-using-simulated-annealing.html>. The ‘initial’ function is used to create the first predictor subset. The function ‘safs_initial’ randomly selects 20% of the predictors. Note that, instead of a function, ‘safs’ can also accept a vector of column numbers as the initial subset. ‘safs_perturb’ is an example of the operation that changes the subset configuration at the start of each new iteration. By default, it will change roughly 1% of the variables in the current subset. The ‘prob’ function defines the acceptance probability at each iteration, given the old and new fitness (i.e. energy values). It assumes that smaller values are better. The default probability function computed the percentage difference between the current and new fitness value and using an exponential function to compute a probability: prob = exp[(current-new)/current*iteration]"
    },
    {
        "name": "safs_perturb",
        "language": "r",
        "package": "caret",
        "description": "Built-in functions related to simulated annealing These functions are used with the ‘functions’ argument of the ‘safsControl’ function. More information on the details of these functions are at <http://topepo.github.io/caret/feature-selection-using-simulated-annealing.html>. The ‘initial’ function is used to create the first predictor subset. The function ‘safs_initial’ randomly selects 20% of the predictors. Note that, instead of a function, ‘safs’ can also accept a vector of column numbers as the initial subset. ‘safs_perturb’ is an example of the operation that changes the subset configuration at the start of each new iteration. By default, it will change roughly 1% of the variables in the current subset. The ‘prob’ function defines the acceptance probability at each iteration, given the old and new fitness (i.e. energy values). It assumes that smaller values are better. The default probability function computed the percentage difference between the current and new fitness value and using an exponential function to compute a probability: prob = exp[(current-new)/current*iteration]"
    },
    {
        "name": "safs_prob",
        "language": "r",
        "package": "caret",
        "description": "Built-in functions related to simulated annealing These functions are used with the ‘functions’ argument of the ‘safsControl’ function. More information on the details of these functions are at <http://topepo.github.io/caret/feature-selection-using-simulated-annealing.html>. The ‘initial’ function is used to create the first predictor subset. The function ‘safs_initial’ randomly selects 20% of the predictors. Note that, instead of a function, ‘safs’ can also accept a vector of column numbers as the initial subset. ‘safs_perturb’ is an example of the operation that changes the subset configuration at the start of each new iteration. By default, it will change roughly 1% of the variables in the current subset. The ‘prob’ function defines the acceptance probability at each iteration, given the old and new fitness (i.e. energy values). It assumes that smaller values are better. The default probability function computed the percentage difference between the current and new fitness value and using an exponential function to compute a probability: prob = exp[(current-new)/current*iteration]"
    },
    {
        "name": "sbf",
        "language": "r",
        "package": "caret",
        "description": "Model fitting after applying univariate filters"
    },
    {
        "name": "sbfControl",
        "language": "r",
        "package": "caret",
        "description": "Controls the execution of models with simple filters for feature selection"
    },
    {
        "name": "sbfIter",
        "language": "r",
        "package": "caret",
        "description": "Internal functions"
    },
    {
        "name": "sensitivity",
        "language": "r",
        "package": "caret",
        "description": "These functions calculate the sensitivity, specificity or predictive values of a measurement system compared to a reference results (the truth or a gold standard). The measurement and \"truth\" data must have the same two possible outcomes and one of the outcomes must be thought of as a \"positive\" results."
    },
    {
        "name": "sortImp",
        "language": "r",
        "package": "caret",
        "description": "Internal functions"
    },
    {
        "name": "spatialSign",
        "language": "r",
        "package": "caret",
        "description": "Compute the spatial sign (a projection of a data vector to a unit length circle). The spatial sign of a vector ‘w’ is ‘w /norm(w)’."
    },
    {
        "name": "specificity",
        "language": "r",
        "package": "caret",
        "description": "These functions calculate the sensitivity, specificity or predictive values of a measurement system compared to a reference results (the truth or a gold standard). The measurement and \"truth\" data must have the same two possible outcomes and one of the outcomes must be thought of as a \"positive\" results."
    },
    {
        "name": "splsda",
        "language": "r",
        "package": "caret",
        "description": "‘plsda’ is used to fit standard PLS models for classification while ‘splsda’ performs sparse PLS that embeds feature selection and regularization for the same purpose."
    },
    {
        "name": "sumDiss",
        "language": "r",
        "package": "caret",
        "description": "Functions to create a sub-sample by maximizing the dissimilarity between new samples and the existing subset."
    },
    {
        "name": "summary.bagEarth",
        "language": "r",
        "package": "caret",
        "description": "The function shows a summary of the results from a bagged earth model"
    },
    {
        "name": "thresholder",
        "language": "r",
        "package": "caret",
        "description": "This function uses the resampling results from a ‘train’ object to generate performance statistics over a set of probability thresholds for two-class problems."
    },
    {
        "name": "tolerance",
        "language": "r",
        "package": "caret",
        "description": "Various functions for setting tuning parameters"
    },
    {
        "name": "train",
        "language": "r",
        "package": "caret",
        "description": "This function sets up a grid of tuning parameters for a number of classification and regression routines, fits each model and calculates a resampling based performance measure."
    },
    {
        "name": "trainControl",
        "language": "r",
        "package": "caret",
        "description": "Control the computational nuances of the ‘train’ function"
    },
    {
        "name": "twoClassSim",
        "language": "r",
        "package": "caret",
        "description": "This function simulates regression and classification data with truly important predictors and irrelevant predictions."
    },
    {
        "name": "twoClassSummary",
        "language": "r",
        "package": "caret",
        "description": "Given two numeric vectors of data, the mean squared error and R-squared are calculated. For two factors, the overall agreement rate and Kappa are determined."
    },
    {
        "name": "upSample",
        "language": "r",
        "package": "caret",
        "description": "‘downSample’ will randomly sample a data set so that all classes have the same frequency as the minority class. ‘upSample’ samples with replacement to make the class distributions equal"
    },
    {
        "name": "varImp",
        "language": "r",
        "package": "caret",
        "description": "A generic method for calculating variable importance for objects produced by ‘train’ and method specific methods"
    },
    {
        "name": "var_seq",
        "language": "r",
        "package": "caret",
        "description": "This function generates a sequence of ‘mtry’ values for random forests."
    },
    {
        "name": "well_numbered",
        "language": "r",
        "package": "caret",
        "description": "Internal functions"
    },
    {
        "name": "Null",
        "language": "r",
        "package": "MASS",
        "description": "Given a matrix, ‘M’, find a matrix ‘N’ giving a basis for the (left) null space. That is ‘crossprod(N, M) = t(N) %*% M’ is an all-zero matrix and ‘N’ has the maximum number of linearly independent columns."
    },
    {
        "name": "Shepard",
        "language": "r",
        "package": "MASS",
        "description": "One form of non-metric multidimensional scaling"
    },
    {
        "name": "addterm",
        "language": "r",
        "package": "MASS",
        "description": "Try fitting all models that differ from the current model by adding a single term from those supplied, maintaining marginality. This function is generic; there exist methods for classes ‘lm’ and ‘glm’ and the default method will work for many other classes."
    },
    {
        "name": "area",
        "language": "r",
        "package": "MASS",
        "description": "Integrate a function of one variable over a finite range using a recursive adaptive method. This function is mainly for demonstration purposes."
    },
    {
        "name": "as.fractions",
        "language": "r",
        "package": "MASS",
        "description": "Find rational approximations to the components of a real numeric object using a standard continued fraction method."
    },
    {
        "name": "bandwidth.nrd",
        "language": "r",
        "package": "MASS",
        "description": "A well-supported rule-of-thumb for choosing the bandwidth of a Gaussian kernel density estimator."
    },
    {
        "name": "bcv",
        "language": "r",
        "package": "MASS",
        "description": "Uses biased cross-validation to select the bandwidth of a Gaussian kernel density estimator."
    },
    {
        "name": "boxcox",
        "language": "r",
        "package": "MASS",
        "description": "Computes and optionally plots profile log-likelihoods for the parameter of the Box-Cox power transformation."
    },
    {
        "name": "con2tr",
        "language": "r",
        "package": "MASS",
        "description": "Convert lists to data frames for use by lattice."
    },
    {
        "name": "contr.sdif",
        "language": "r",
        "package": "MASS",
        "description": "A coding for factors based on successive differences."
    },
    {
        "name": "corresp",
        "language": "r",
        "package": "MASS",
        "description": "Find the principal canonical correlation and corresponding row- and column-scores from a correspondence analysis of a two-way contingency table."
    },
    {
        "name": "cov.mcd",
        "language": "r",
        "package": "MASS",
        "description": "Compute a multivariate location and scale estimate with a high breakdown point - this can be thought of as estimating the mean and covariance of the ‘good’ part of the data. ‘cov.mve’ and ‘cov.mcd’ are compatibility wrappers."
    },
    {
        "name": "cov.mve",
        "language": "r",
        "package": "MASS",
        "description": "Compute a multivariate location and scale estimate with a high breakdown point - this can be thought of as estimating the mean and covariance of the ‘good’ part of the data. ‘cov.mve’ and ‘cov.mcd’ are compatibility wrappers."
    },
    {
        "name": "cov.rob",
        "language": "r",
        "package": "MASS",
        "description": "Compute a multivariate location and scale estimate with a high breakdown point - this can be thought of as estimating the mean and covariance of the ‘good’ part of the data. ‘cov.mve’ and ‘cov.mcd’ are compatibility wrappers."
    },
    {
        "name": "cov.trob",
        "language": "r",
        "package": "MASS",
        "description": "Estimates a covariance or correlation matrix assuming the data came from a multivariate t distribution: this provides some degree of robustness to outlier without giving a high breakdown point."
    },
    {
        "name": "denumerate",
        "language": "r",
        "package": "MASS",
        "description": "‘loglm’ allows dimension numbers to be used in place of names in the formula. ‘denumerate’ modifies such a formula into one that ‘terms’ can process."
    },
    {
        "name": "dose.p",
        "language": "r",
        "package": "MASS",
        "description": "Calibrate binomial assays, generalizing the calculation of LD50."
    },
    {
        "name": "dropterm",
        "language": "r",
        "package": "MASS",
        "description": "Try fitting all models that differ from the current model by dropping a single term, maintaining marginality. This function is generic; there exist methods for classes ‘lm’ and ‘glm’ and the default method will work for many other classes."
    },
    {
        "name": "enlist",
        "language": "r",
        "package": "MASS",
        "description": "Internal MASS functions."
    },
    {
        "name": "eqscplot",
        "language": "r",
        "package": "MASS",
        "description": "Version of a scatterplot with scales chosen to be equal on both axes, that is 1cm represents the same units on each"
    },
    {
        "name": "fbeta",
        "language": "r",
        "package": "MASS",
        "description": "Internal MASS functions."
    },
    {
        "name": "fitdistr",
        "language": "r",
        "package": "MASS",
        "description": "Maximum-likelihood fitting of univariate distributions, allowing parameters to be held fixed if desired."
    },
    {
        "name": "fractions",
        "language": "r",
        "package": "MASS",
        "description": "Find rational approximations to the components of a real numeric object using a standard continued fraction method."
    },
    {
        "name": "frequency.polygon",
        "language": "r",
        "package": "MASS",
        "description": "Internal MASS functions."
    },
    {
        "name": "gamma.dispersion",
        "language": "r",
        "package": "MASS",
        "description": "A front end to ‘gamma.shape’ for convenience. Finds the reciprocal of the estimate of the shape parameter only."
    },
    {
        "name": "gamma.shape",
        "language": "r",
        "package": "MASS",
        "description": "Find the maximum likelihood estimate of the shape parameter of the gamma distribution after fitting a ‘Gamma’ generalized linear model."
    },
    {
        "name": "ginv",
        "language": "r",
        "package": "MASS",
        "description": "Calculates the Moore-Penrose generalized inverse of a matrix ‘X’."
    },
    {
        "name": "glm.convert",
        "language": "r",
        "package": "MASS",
        "description": "This function modifies an output object from ‘glm.nb()’ to one that looks like the output from ‘glm()’ with a negative binomial family. This allows it to be updated keeping the theta parameter fixed."
    },
    {
        "name": "glm.nb",
        "language": "r",
        "package": "MASS",
        "description": "A modification of the system function ‘glm()’ to include estimation of the additional parameter, ‘theta’, for a Negative Binomial generalized linear model."
    },
    {
        "name": "glmmPQL",
        "language": "r",
        "package": "MASS",
        "description": "Fit a GLMM model with multivariate normal random effects, using Penalized Quasi-Likelihood."
    },
    {
        "name": "hist.FD",
        "language": "r",
        "package": "MASS",
        "description": "Plot a histogram with automatic bin width selection, using the Scott or Freedman-Diaconis formulae."
    },
    {
        "name": "hist.scott",
        "language": "r",
        "package": "MASS",
        "description": "Plot a histogram with automatic bin width selection, using the Scott or Freedman-Diaconis formulae."
    },
    {
        "name": "huber",
        "language": "r",
        "package": "MASS",
        "description": "Finds the Huber M-estimator of location with MAD scale."
    },
    {
        "name": "hubers",
        "language": "r",
        "package": "MASS",
        "description": "Finds the Huber M-estimator for location with scale specified, scale with location specified, or both if neither is specified."
    },
    {
        "name": "is.fractions",
        "language": "r",
        "package": "MASS",
        "description": "Find rational approximations to the components of a real numeric object using a standard continued fraction method."
    },
    {
        "name": "isoMDS",
        "language": "r",
        "package": "MASS",
        "description": "One form of non-metric multidimensional scaling"
    },
    {
        "name": "kde2d",
        "language": "r",
        "package": "MASS",
        "description": "Two-dimensional kernel density estimation with an axis-aligned bivariate normal kernel, evaluated on a square grid."
    },
    {
        "name": "lda",
        "language": "r",
        "package": "MASS",
        "description": "Linear discriminant analysis."
    },
    {
        "name": "ldahist",
        "language": "r",
        "package": "MASS",
        "description": "Plot histograms or density plots of data on a single Fisher linear discriminant."
    },
    {
        "name": "lm.gls",
        "language": "r",
        "package": "MASS",
        "description": "Fit linear models by Generalized Least Squares"
    },
    {
        "name": "lm.ridge",
        "language": "r",
        "package": "MASS",
        "description": "Fit a linear model by ridge regression."
    },
    {
        "name": "lmsreg",
        "language": "r",
        "package": "MASS",
        "description": "Fit a regression to the _good_ points in the dataset, thereby achieving a regression estimator with a high breakdown point. ‘lmsreg’ and ‘ltsreg’ are compatibility wrappers."
    },
    {
        "name": "loglm",
        "language": "r",
        "package": "MASS",
        "description": "This function provides a front-end to the standard function, ‘loglin’, to allow log-linear models to be specified and fitted in a manner similar to that of other fitting functions, such as ‘glm’."
    },
    {
        "name": "loglm1",
        "language": "r",
        "package": "MASS",
        "description": "‘loglm1’ is an internal function used by ‘loglm’. It is a generic function dispatching on the ‘data’ argument."
    },
    {
        "name": "logtrans",
        "language": "r",
        "package": "MASS",
        "description": "Find and optionally plot the marginal (profile) likelihood for alpha for a transformation model of the form ‘log(y + alpha) ~ x1 + x2 + ...’."
    },
    {
        "name": "lqs",
        "language": "r",
        "package": "MASS",
        "description": "Fit a regression to the _good_ points in the dataset, thereby achieving a regression estimator with a high breakdown point. ‘lmsreg’ and ‘ltsreg’ are compatibility wrappers."
    },
    {
        "name": "lqs.formula",
        "language": "r",
        "package": "MASS",
        "description": "Fit a regression to the _good_ points in the dataset, thereby achieving a regression estimator with a high breakdown point. ‘lmsreg’ and ‘ltsreg’ are compatibility wrappers."
    },
    {
        "name": "ltsreg",
        "language": "r",
        "package": "MASS",
        "description": "Fit a regression to the _good_ points in the dataset, thereby achieving a regression estimator with a high breakdown point. ‘lmsreg’ and ‘ltsreg’ are compatibility wrappers."
    },
    {
        "name": "mca",
        "language": "r",
        "package": "MASS",
        "description": "Computes a multiple correspondence analysis of a set of factors."
    },
    {
        "name": "mvrnorm",
        "language": "r",
        "package": "MASS",
        "description": "Produces one or more samples from the specified multivariate normal distribution."
    },
    {
        "name": "nclass.freq",
        "language": "r",
        "package": "MASS",
        "description": "Internal MASS functions."
    },
    {
        "name": "neg.bin",
        "language": "r",
        "package": "MASS",
        "description": "Internal MASS functions."
    },
    {
        "name": "negative.binomial",
        "language": "r",
        "package": "MASS",
        "description": "Specifies the information required to fit a Negative Binomial generalized linear model, with known ‘theta’ parameter, using ‘glm()’."
    },
    {
        "name": "negexp.SSival",
        "language": "r",
        "package": "MASS",
        "description": "Internal MASS functions."
    },
    {
        "name": "parcoord",
        "language": "r",
        "package": "MASS",
        "description": "Parallel coordinates plot"
    },
    {
        "name": "polr",
        "language": "r",
        "package": "MASS",
        "description": "Fits a logistic or probit regression model to an ordered factor response. The default logistic case is _proportional odds logistic regression_, after which the function is named."
    },
    {
        "name": "psi.bisquare",
        "language": "r",
        "package": "MASS",
        "description": "Fit a linear model by robust regression using an M estimator."
    },
    {
        "name": "psi.hampel",
        "language": "r",
        "package": "MASS",
        "description": "Fit a linear model by robust regression using an M estimator."
    },
    {
        "name": "psi.huber",
        "language": "r",
        "package": "MASS",
        "description": "Fit a linear model by robust regression using an M estimator."
    },
    {
        "name": "qda",
        "language": "r",
        "package": "MASS",
        "description": "Quadratic discriminant analysis."
    },
    {
        "name": "rational",
        "language": "r",
        "package": "MASS",
        "description": "Find rational approximations to the components of a real numeric object using a standard continued fraction method."
    },
    {
        "name": "renumerate",
        "language": "r",
        "package": "MASS",
        "description": "‘denumerate’ converts a formula written using the conventions of ‘loglm’ into one that ‘terms’ is able to process. ‘renumerate’ converts it back again to a form like the original."
    },
    {
        "name": "rlm",
        "language": "r",
        "package": "MASS",
        "description": "Fit a linear model by robust regression using an M estimator."
    },
    {
        "name": "rms.curv",
        "language": "r",
        "package": "MASS",
        "description": "Calculates the root mean square parameter effects and intrinsic relative curvatures, c^theta and c^iota, for a fitted nonlinear regression, as defined in Bates & Watts, section 7.3, p. 253ff"
    },
    {
        "name": "rnegbin",
        "language": "r",
        "package": "MASS",
        "description": "Function to generate random outcomes from a Negative Binomial distribution, with mean ‘mu’ and variance ‘mu + mu^2/theta’."
    },
    {
        "name": "sammon",
        "language": "r",
        "package": "MASS",
        "description": "One form of non-metric multidimensional scaling."
    },
    {
        "name": "select",
        "language": "r",
        "package": "MASS",
        "description": "Fit a linear model by ridge regression."
    },
    {
        "name": "stdres",
        "language": "r",
        "package": "MASS",
        "description": "The standardized residuals. These are normalized to unit variance, fitted including the current data point."
    },
    {
        "name": "stepAIC",
        "language": "r",
        "package": "MASS",
        "description": "Performs stepwise model selection by AIC."
    },
    {
        "name": "studres",
        "language": "r",
        "package": "MASS",
        "description": "The Studentized residuals. Like standardized residuals, these are normalized to unit variance, but the Studentized version is fitted ignoring the current data point. (They are sometimes called jackknifed residuals)."
    },
    {
        "name": "theta.md",
        "language": "r",
        "package": "MASS",
        "description": "Given the estimated mean vector, estimate ‘theta’ of the Negative Binomial Distribution."
    },
    {
        "name": "theta.ml",
        "language": "r",
        "package": "MASS",
        "description": "Given the estimated mean vector, estimate ‘theta’ of the Negative Binomial Distribution."
    },
    {
        "name": "theta.mm",
        "language": "r",
        "package": "MASS",
        "description": "Given the estimated mean vector, estimate ‘theta’ of the Negative Binomial Distribution."
    },
    {
        "name": "truehist",
        "language": "r",
        "package": "MASS",
        "description": "Creates a histogram on the current graphics device."
    },
    {
        "name": "ucv",
        "language": "r",
        "package": "MASS",
        "description": "Uses unbiased cross-validation to select the bandwidth of a Gaussian kernel density estimator."
    },
    {
        "name": "width.SJ",
        "language": "r",
        "package": "MASS",
        "description": "Uses the method of Sheather & Jones (1991) to select the bandwidth of a Gaussian kernel density estimator."
    },
    {
        "name": "write.matrix",
        "language": "r",
        "package": "MASS",
        "description": "Writes a matrix or data frame to a file or the console, using column labels and a layout respecting columns."
    },
    {
        "name": "AIC",
        "language": "r",
        "package": "stats",
        "description": "Generic function calculating Akaike's ‘An Information Criterion’ for one or several fitted model objects for which a log-likelihood value can be obtained, according to the formula -2*log-likelihood + k*npar, where npar represents the number of parameters in the fitted model, and k = 2 for the usual AIC, or k = log(n) (n being the number of observations) for the so-called BIC or SBC (Schwarz's Bayesian criterion)."
    },
    {
        "name": "ARMAacf",
        "language": "r",
        "package": "stats",
        "description": "Compute the theoretical autocorrelation function or partial autocorrelation function for an ARMA process."
    },
    {
        "name": "ARMAtoMA",
        "language": "r",
        "package": "stats",
        "description": "Convert ARMA process to infinite MA process."
    },
    {
        "name": "BIC",
        "language": "r",
        "package": "stats",
        "description": "Generic function calculating Akaike's ‘An Information Criterion’ for one or several fitted model objects for which a log-likelihood value can be obtained, according to the formula -2*log-likelihood + k*npar, where npar represents the number of parameters in the fitted model, and k = 2 for the usual AIC, or k = log(n) (n being the number of observations) for the so-called BIC or SBC (Schwarz's Bayesian criterion)."
    },
    {
        "name": "Box.test",
        "language": "r",
        "package": "stats",
        "description": "Compute the Box-Pierce or Ljung-Box test statistic for examining the null hypothesis of independence in a given time series. These are sometimes known as ‘portmanteau’ tests."
    },
    {
        "name": "C",
        "language": "r",
        "package": "stats",
        "description": "Sets the ‘\"contrasts\"’ attribute for the factor."
    },
    {
        "name": "D",
        "language": "r",
        "package": "stats",
        "description": "Compute derivatives of simple expressions, symbolically and algorithmically."
    },
    {
        "name": "DF2formula",
        "language": "r",
        "package": "stats",
        "description": "The generic function ‘formula’ and its specific methods provide a way of extracting formulae which have been included in other objects. ‘as.formula’ is almost identical, additionally preserving attributes when ‘object’ already inherits from ‘\"formula\"’."
    },
    {
        "name": "Gamma",
        "language": "r",
        "package": "stats",
        "description": "Family objects provide a convenient way to specify the details of the models used by functions such as ‘glm’. See the documentation for ‘glm’ for the details on how such model fitting takes place."
    },
    {
        "name": "HoltWinters",
        "language": "r",
        "package": "stats",
        "description": "Computes Holt-Winters Filtering of a given time series. Unknown parameters are determined by minimizing the squared prediction error."
    },
    {
        "name": "IQR",
        "language": "r",
        "package": "stats",
        "description": "computes interquartile range of the ‘x’ values."
    },
    {
        "name": "KalmanForecast",
        "language": "r",
        "package": "stats",
        "description": "Use Kalman Filtering to find the (Gaussian) log-likelihood, or for forecasting or smoothing."
    },
    {
        "name": "KalmanLike",
        "language": "r",
        "package": "stats",
        "description": "Use Kalman Filtering to find the (Gaussian) log-likelihood, or for forecasting or smoothing."
    },
    {
        "name": "KalmanRun",
        "language": "r",
        "package": "stats",
        "description": "Use Kalman Filtering to find the (Gaussian) log-likelihood, or for forecasting or smoothing."
    },
    {
        "name": "KalmanSmooth",
        "language": "r",
        "package": "stats",
        "description": "Use Kalman Filtering to find the (Gaussian) log-likelihood, or for forecasting or smoothing."
    },
    {
        "name": "NLSstAsymptotic",
        "language": "r",
        "package": "stats",
        "description": "Fits the asymptotic regression model, in the form ‘b0 + b1*(1-exp(-exp(lrc) * x))’ to the ‘xy’ data. This can be used as a building block in determining starting estimates for more complicated models."
    },
    {
        "name": "NLSstClosestX",
        "language": "r",
        "package": "stats",
        "description": "Use inverse linear interpolation to approximate the ‘x’ value at which the function represented by ‘xy’ is equal to ‘yval’."
    },
    {
        "name": "NLSstLfAsymptote",
        "language": "r",
        "package": "stats",
        "description": "Provide an initial guess at the horizontal asymptote on the left side (i.e., small values of ‘x’) of the graph of ‘y’ versus ‘x’ from the ‘xy’ object. Primarily used within ‘initial’ functions for self-starting nonlinear regression models."
    },
    {
        "name": "NLSstRtAsymptote",
        "language": "r",
        "package": "stats",
        "description": "Provide an initial guess at the horizontal asymptote on the right side (i.e., large values of ‘x’) of the graph of ‘y’ versus ‘x’ from the ‘xy’ object. Primarily used within ‘initial’ functions for self-starting nonlinear regression models."
    },
    {
        "name": "PP.test",
        "language": "r",
        "package": "stats",
        "description": "Computes the Phillips-Perron test for the null hypothesis that ‘x’ has a unit root against a stationary alternative."
    },
    {
        "name": "Pair",
        "language": "r",
        "package": "stats",
        "description": "Combines two vectors into an object of class ‘\"Pair\"’"
    },
    {
        "name": "SSD",
        "language": "r",
        "package": "stats",
        "description": "Functions to compute matrix of residual sums of squares and products, or the estimated variance matrix for multivariate linear models."
    },
    {
        "name": "SSasymp",
        "language": "r",
        "package": "stats",
        "description": "This ‘selfStart’ model evaluates the asymptotic regression function and its gradient. It has an ‘initial’ attribute that will evaluate initial estimates of the parameters ‘Asym’, ‘R0’, and ‘lrc’ for a given set of data. Note that ‘SSweibull()’ generalizes this asymptotic model with an extra parameter."
    },
    {
        "name": "SSasympOff",
        "language": "r",
        "package": "stats",
        "description": "This ‘selfStart’ model evaluates an alternative parametrization of the asymptotic regression function and the gradient with respect to those parameters. It has an ‘initial’ attribute that creates initial estimates of the parameters ‘Asym’, ‘lrc’, and ‘c0’."
    },
    {
        "name": "SSasympOrig",
        "language": "r",
        "package": "stats",
        "description": "This ‘selfStart’ model evaluates the asymptotic regression function through the origin and its gradient. It has an ‘initial’ attribute that will evaluate initial estimates of the parameters ‘Asym’ and ‘lrc’ for a given set of data."
    },
    {
        "name": "SSbiexp",
        "language": "r",
        "package": "stats",
        "description": "This ‘selfStart’ model evaluates the biexponential model function and its gradient. It has an ‘initial’ attribute that creates initial estimates of the parameters ‘A1’, ‘lrc1’, ‘A2’, and ‘lrc2’."
    },
    {
        "name": "SSfol",
        "language": "r",
        "package": "stats",
        "description": "This ‘selfStart’ model evaluates the first-order compartment function and its gradient. It has an ‘initial’ attribute that creates initial estimates of the parameters ‘lKe’, ‘lKa’, and ‘lCl’."
    },
    {
        "name": "SSfpl",
        "language": "r",
        "package": "stats",
        "description": "This ‘selfStart’ model evaluates the four-parameter logistic function and its gradient. It has an ‘initial’ attribute computing initial estimates of the parameters ‘A’, ‘B’, ‘xmid’, and ‘scal’ for a given set of data."
    },
    {
        "name": "SSgompertz",
        "language": "r",
        "package": "stats",
        "description": "This ‘selfStart’ model evaluates the Gompertz growth model and its gradient. It has an ‘initial’ attribute that creates initial estimates of the parameters ‘Asym’, ‘b2’, and ‘b3’."
    },
    {
        "name": "SSlogis",
        "language": "r",
        "package": "stats",
        "description": "This ‘selfStart’ model evaluates the logistic function and its gradient. It has an ‘initial’ attribute that creates initial estimates of the parameters ‘Asym’, ‘xmid’, and ‘scal’. In R 3.4.2 and earlier, that init function failed when ‘min(input)’ was exactly zero."
    },
    {
        "name": "SSmicmen",
        "language": "r",
        "package": "stats",
        "description": "This ‘selfStart’ model evaluates the Michaelis-Menten model and its gradient. It has an ‘initial’ attribute that will evaluate initial estimates of the parameters ‘Vm’ and ‘K’"
    },
    {
        "name": "SSweibull",
        "language": "r",
        "package": "stats",
        "description": "This ‘selfStart’ model evaluates the Weibull model for growth curve data and its gradient. It has an ‘initial’ attribute that will evaluate initial estimates of the parameters ‘Asym’, ‘Drop’, ‘lrc’, and ‘pwr’ for a given set of data."
    },
    {
        "name": "StructTS",
        "language": "r",
        "package": "stats",
        "description": "Fit a structural model for a time series by maximum likelihood."
    },
    {
        "name": "TukeyHSD",
        "language": "r",
        "package": "stats",
        "description": "Create a set of confidence intervals on the differences between the means of the levels of a factor with the specified family-wise probability of coverage. The intervals are based on the Studentized range statistic, Tukey's ‘Honest Significant Difference’ method."
    },
    {
        "name": "acf",
        "language": "r",
        "package": "stats",
        "description": "The function ‘acf’ computes (and by default plots) estimates of the autocovariance or autocorrelation function. Function ‘pacf’ is the function used for the partial autocorrelations. Function ‘ccf’ computes the cross-correlation or cross-covariance of two univariate series."
    },
    {
        "name": "acf2AR",
        "language": "r",
        "package": "stats",
        "description": "Compute an AR process exactly fitting an autocorrelation function."
    },
    {
        "name": "add.scope",
        "language": "r",
        "package": "stats",
        "description": "‘add.scope’ and ‘drop.scope’ compute those terms that can be individually added to or dropped from a model while respecting the hierarchy of terms."
    },
    {
        "name": "add1",
        "language": "r",
        "package": "stats",
        "description": "Compute all the single terms in the ‘scope’ argument that can be added to or dropped from the model, fit those models and compute a table of the changes in fit."
    },
    {
        "name": "addmargins",
        "language": "r",
        "package": "stats",
        "description": "For a given table one can specify which of the classifying factors to expand by one or more levels to hold margins to be calculated. One may for example form sums and means over the first dimension and medians over the second. The resulting table will then have two extra levels for the first dimension and one extra level for the second. The default is to sum over all margins in the table. Other possibilities may give results that depend on the order in which the margins are computed. This is flagged in the printed output from the function."
    },
    {
        "name": "aggregate",
        "language": "r",
        "package": "stats",
        "description": "Splits the data into subsets, computes summary statistics for each, and returns the result in a convenient form."
    },
    {
        "name": "aggregate.data.frame",
        "language": "r",
        "package": "stats",
        "description": "Splits the data into subsets, computes summary statistics for each, and returns the result in a convenient form."
    },
    {
        "name": "aggregate.ts",
        "language": "r",
        "package": "stats",
        "description": "Splits the data into subsets, computes summary statistics for each, and returns the result in a convenient form."
    },
    {
        "name": "alias",
        "language": "r",
        "package": "stats",
        "description": "Find aliases (linearly dependent terms) in a linear model specified by a formula."
    },
    {
        "name": "anova",
        "language": "r",
        "package": "stats",
        "description": "Compute analysis of variance (or deviance) tables for one or more fitted model objects."
    },
    {
        "name": "ansari.test",
        "language": "r",
        "package": "stats",
        "description": "Performs the Ansari-Bradley two-sample test for a difference in scale parameters."
    },
    {
        "name": "aov",
        "language": "r",
        "package": "stats",
        "description": "Fit an analysis of variance model by a call to ‘lm’ (for each stratum if an ‘Error(.)’ is used)."
    },
    {
        "name": "approx",
        "language": "r",
        "package": "stats",
        "description": "Return a list of points which linearly interpolate given data points, or a function performing the linear (or constant) interpolation."
    },
    {
        "name": "approxfun",
        "language": "r",
        "package": "stats",
        "description": "Return a list of points which linearly interpolate given data points, or a function performing the linear (or constant) interpolation."
    },
    {
        "name": "ar",
        "language": "r",
        "package": "stats",
        "description": "Fit an autoregressive time series model to the data, by default selecting the complexity by AIC."
    },
    {
        "name": "ar.burg",
        "language": "r",
        "package": "stats",
        "description": "Fit an autoregressive time series model to the data, by default selecting the complexity by AIC."
    },
    {
        "name": "ar.mle",
        "language": "r",
        "package": "stats",
        "description": "Fit an autoregressive time series model to the data, by default selecting the complexity by AIC."
    },
    {
        "name": "ar.ols",
        "language": "r",
        "package": "stats",
        "description": "Fit an autoregressive time series model to the data by ordinary least squares, by default selecting the complexity by AIC."
    },
    {
        "name": "ar.yw",
        "language": "r",
        "package": "stats",
        "description": "Fit an autoregressive time series model to the data, by default selecting the complexity by AIC."
    },
    {
        "name": "arima",
        "language": "r",
        "package": "stats",
        "description": "Fit an ARIMA model to a univariate time series."
    },
    {
        "name": "arima.sim",
        "language": "r",
        "package": "stats",
        "description": "Simulate from an ARIMA model."
    },
    {
        "name": "arima0",
        "language": "r",
        "package": "stats",
        "description": "Fit an ARIMA model to a univariate time series, and forecast from the fitted model."
    },
    {
        "name": "arima0.diag",
        "language": "r",
        "package": "stats",
        "description": "The functions or variables listed here are no longer part of R as they are not needed (any more)."
    },
    {
        "name": "as.dendrogram",
        "language": "r",
        "package": "stats",
        "description": "Class ‘\"dendrogram\"’ provides general functions for handling tree-like structures. It is intended as a replacement for similar functions in hierarchical clustering and classification/regression trees, such that all of these can use the same engine for plotting or cutting trees."
    },
    {
        "name": "as.dist",
        "language": "r",
        "package": "stats",
        "description": "This function computes and returns the distance matrix computed by using the specified distance measure to compute the distances between the rows of a data matrix."
    },
    {
        "name": "as.formula",
        "language": "r",
        "package": "stats",
        "description": "The generic function ‘formula’ and its specific methods provide a way of extracting formulae which have been included in other objects. ‘as.formula’ is almost identical, additionally preserving attributes when ‘object’ already inherits from ‘\"formula\"’."
    },
    {
        "name": "as.hclust",
        "language": "r",
        "package": "stats",
        "description": "Converts objects from other hierarchical clustering functions to class ‘\"hclust\"’."
    },
    {
        "name": "as.stepfun",
        "language": "r",
        "package": "stats",
        "description": "Given the vectors (x[1], ..., x[n]) and (y[0], y[1], ..., y[n]) (one value more!), ‘stepfun(x, y, ...)’ returns an interpolating ‘step’ function, say ‘fn’. I.e., fn(t) = c[i] (constant) for t in ( x[i], x[i+1]) and at the abscissa values, if (by default) ‘right = FALSE’, fn(x[i]) = y[i] and for ‘right = TRUE’, fn(x[i]) = y[i-1], for i=1, ..., n. The value of the constant c[i] above depends on the ‘continuity’ parameter ‘f’. For the default, ‘right = FALSE, f = 0’, ‘fn’ is a _cadlag_ function, i.e., continuous from the right, limits from the left, so that the function is piecewise constant on intervals that include their _left_ endpoint. In general, c[i] is interpolated in between the neighbouring y values, c[i] = (1-f)*y[i] + f*y[i+1]. Therefore, for non-0 values of ‘f’, ‘fn’ may no longer be a proper step function, since it can be discontinuous from both sides, unless ‘right = TRUE, f = 1’ which is left-continuous (i.e., constant pieces contain their right endpoint)."
    },
    {
        "name": "as.ts",
        "language": "r",
        "package": "stats",
        "description": "The function ‘ts’ is used to create time-series objects. ‘as.ts’ and ‘is.ts’ coerce an object to a time-series and test whether an object is a time series."
    },
    {
        "name": "asOneSidedFormula",
        "language": "r",
        "package": "stats",
        "description": "Names, calls, expressions (first element), numeric values, and character strings are converted to one-sided formulae associated with the global environment. If the input is a formula, it must be one-sided, in which case it is returned unaltered."
    },
    {
        "name": "ave",
        "language": "r",
        "package": "stats",
        "description": "Subsets of ‘x[]’ are averaged, where each subset consist of those observations with the same factor levels."
    },
    {
        "name": "bandwidth.kernel",
        "language": "r",
        "package": "stats",
        "description": "The ‘\"tskernel\"’ class is designed to represent discrete symmetric normalized smoothing kernels. These kernels can be used to smooth vectors, matrices, or time series objects. There are ‘print’, ‘plot’ and ‘[’ methods for these kernel objects."
    },
    {
        "name": "bartlett.test",
        "language": "r",
        "package": "stats",
        "description": "Performs Bartlett's test of the null that the variances in each of the groups (samples) are the same."
    },
    {
        "name": "binom.test",
        "language": "r",
        "package": "stats",
        "description": "Performs an exact test of a simple null hypothesis about the probability of success in a Bernoulli experiment."
    },
    {
        "name": "binomial",
        "language": "r",
        "package": "stats",
        "description": "Family objects provide a convenient way to specify the details of the models used by functions such as ‘glm’. See the documentation for ‘glm’ for the details on how such model fitting takes place."
    },
    {
        "name": "biplot",
        "language": "r",
        "package": "stats",
        "description": "Plot a biplot on the current graphics device."
    },
    {
        "name": "bw.SJ",
        "language": "r",
        "package": "stats",
        "description": "Bandwidth selectors for Gaussian kernels in ‘density’."
    },
    {
        "name": "bw.bcv",
        "language": "r",
        "package": "stats",
        "description": "Bandwidth selectors for Gaussian kernels in ‘density’."
    },
    {
        "name": "bw.nrd",
        "language": "r",
        "package": "stats",
        "description": "Bandwidth selectors for Gaussian kernels in ‘density’."
    },
    {
        "name": "bw.nrd0",
        "language": "r",
        "package": "stats",
        "description": "Bandwidth selectors for Gaussian kernels in ‘density’."
    },
    {
        "name": "bw.ucv",
        "language": "r",
        "package": "stats",
        "description": "Bandwidth selectors for Gaussian kernels in ‘density’."
    },
    {
        "name": "cancor",
        "language": "r",
        "package": "stats",
        "description": "Compute the canonical correlations between two data matrices."
    },
    {
        "name": "case.names",
        "language": "r",
        "package": "stats",
        "description": "Simple utilities returning (non-missing) case names, and (non-eliminated) variable names."
    },
    {
        "name": "ccf",
        "language": "r",
        "package": "stats",
        "description": "The function ‘acf’ computes (and by default plots) estimates of the autocovariance or autocorrelation function. Function ‘pacf’ is the function used for the partial autocorrelations. Function ‘ccf’ computes the cross-correlation or cross-covariance of two univariate series."
    },
    {
        "name": "chisq.test",
        "language": "r",
        "package": "stats",
        "description": "‘chisq.test’ performs chi-squared contingency table tests and goodness-of-fit tests."
    },
    {
        "name": "cmdscale",
        "language": "r",
        "package": "stats",
        "description": "Classical multidimensional scaling (MDS) of a data matrix. Also known as _principal coordinates analysis_ (Gower, 1966)."
    },
    {
        "name": "coef",
        "language": "r",
        "package": "stats",
        "description": "‘coef’ is a generic function which extracts model coefficients from objects returned by modeling functions. ‘coefficients’ is an _alias_ for it."
    },
    {
        "name": "coefficients",
        "language": "r",
        "package": "stats",
        "description": "‘coef’ is a generic function which extracts model coefficients from objects returned by modeling functions. ‘coefficients’ is an _alias_ for it."
    },
    {
        "name": "complete.cases",
        "language": "r",
        "package": "stats",
        "description": "Return a logical vector indicating which cases are complete, i.e., have no missing values."
    },
    {
        "name": "confint",
        "language": "r",
        "package": "stats",
        "description": "Computes confidence intervals for one or more parameters in a fitted model. There is a default and a method for objects inheriting from class ‘\"lm\"’."
    },
    {
        "name": "confint.default",
        "language": "r",
        "package": "stats",
        "description": "Computes confidence intervals for one or more parameters in a fitted model. There is a default and a method for objects inheriting from class ‘\"lm\"’."
    },
    {
        "name": "confint.lm",
        "language": "r",
        "package": "stats",
        "description": "Computes confidence intervals for one or more parameters in a fitted model. There is a default and a method for objects inheriting from class ‘\"lm\"’."
    },
    {
        "name": "constrOptim",
        "language": "r",
        "package": "stats",
        "description": "Minimise a function subject to linear inequality constraints using an adaptive barrier algorithm."
    },
    {
        "name": "contr.SAS",
        "language": "r",
        "package": "stats",
        "description": "Return a matrix of contrasts."
    },
    {
        "name": "contr.helmert",
        "language": "r",
        "package": "stats",
        "description": "Return a matrix of contrasts."
    },
    {
        "name": "contr.poly",
        "language": "r",
        "package": "stats",
        "description": "Return a matrix of contrasts."
    },
    {
        "name": "contr.sum",
        "language": "r",
        "package": "stats",
        "description": "Return a matrix of contrasts."
    },
    {
        "name": "contr.treatment",
        "language": "r",
        "package": "stats",
        "description": "Return a matrix of contrasts."
    },
    {
        "name": "contrasts",
        "language": "r",
        "package": "stats",
        "description": "Set and view the contrasts associated with a factor."
    },
    {
        "name": "contrasts<-",
        "language": "r",
        "package": "stats",
        "description": "Set and view the contrasts associated with a factor."
    },
    {
        "name": "convolve",
        "language": "r",
        "package": "stats",
        "description": "Use the Fast Fourier Transform to compute the several kinds of convolutions of two sequences."
    },
    {
        "name": "cooks.distance",
        "language": "r",
        "package": "stats",
        "description": "This suite of functions can be used to compute some of the regression (leave-one-out deletion) diagnostics for linear and generalized linear models discussed in Belsley, Kuh and Welsch (1980), Cook and Weisberg (1982), etc."
    },
    {
        "name": "cophenetic",
        "language": "r",
        "package": "stats",
        "description": "Computes the cophenetic distances for a hierarchical clustering."
    },
    {
        "name": "cor",
        "language": "r",
        "package": "stats",
        "description": "‘var’, ‘cov’ and ‘cor’ compute the variance of ‘x’ and the covariance or correlation of ‘x’ and ‘y’ if these are vectors. If ‘x’ and ‘y’ are matrices then the covariances (or correlations) between the columns of ‘x’ and the columns of ‘y’ are computed. ‘cov2cor’ scales a covariance matrix into the corresponding correlation matrix _efficiently_."
    },
    {
        "name": "cor.test",
        "language": "r",
        "package": "stats",
        "description": "Test for association between paired samples, using one of Pearson's product moment correlation coefficient, Kendall's tau or Spearman's rho."
    },
    {
        "name": "cov",
        "language": "r",
        "package": "stats",
        "description": "‘var’, ‘cov’ and ‘cor’ compute the variance of ‘x’ and the covariance or correlation of ‘x’ and ‘y’ if these are vectors. If ‘x’ and ‘y’ are matrices then the covariances (or correlations) between the columns of ‘x’ and the columns of ‘y’ are computed. ‘cov2cor’ scales a covariance matrix into the corresponding correlation matrix _efficiently_."
    },
    {
        "name": "cov.wt",
        "language": "r",
        "package": "stats",
        "description": "Returns a list containing estimates of the weighted covariance matrix and the mean of the data, and optionally of the (weighted) correlation matrix."
    },
    {
        "name": "cov2cor",
        "language": "r",
        "package": "stats",
        "description": "‘var’, ‘cov’ and ‘cor’ compute the variance of ‘x’ and the covariance or correlation of ‘x’ and ‘y’ if these are vectors. If ‘x’ and ‘y’ are matrices then the covariances (or correlations) between the columns of ‘x’ and the columns of ‘y’ are computed. ‘cov2cor’ scales a covariance matrix into the corresponding correlation matrix _efficiently_."
    },
    {
        "name": "covratio",
        "language": "r",
        "package": "stats",
        "description": "This suite of functions can be used to compute some of the regression (leave-one-out deletion) diagnostics for linear and generalized linear models discussed in Belsley, Kuh and Welsch (1980), Cook and Weisberg (1982), etc."
    },
    {
        "name": "cpgram",
        "language": "r",
        "package": "stats",
        "description": "Plots a cumulative periodogram."
    },
    {
        "name": "cutree",
        "language": "r",
        "package": "stats",
        "description": "Cuts a tree, e.g., as resulting from ‘hclust’, into several groups either by specifying the desired number(s) of groups or the cut height(s)."
    },
    {
        "name": "cycle",
        "language": "r",
        "package": "stats",
        "description": "‘time’ creates the vector of times at which a time series was sampled. ‘cycle’ gives the positions in the cycle of each observation. ‘frequency’ returns the number of samples per unit time and ‘deltat’ the time interval between observations (see ‘ts’)."
    },
    {
        "name": "dbeta",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the Beta distribution with parameters ‘shape1’ and ‘shape2’ (and optional non-centrality parameter ‘ncp’)."
    },
    {
        "name": "dbinom",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the binomial distribution with parameters ‘size’ and ‘prob’. This is conventionally interpreted as the number of ‘successes’ in ‘size’ trials."
    },
    {
        "name": "dcauchy",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the Cauchy distribution with location parameter ‘location’ and scale parameter ‘scale’."
    },
    {
        "name": "dchisq",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the chi-squared (chi^2) distribution with ‘df’ degrees of freedom and optional non-centrality parameter ‘ncp’."
    },
    {
        "name": "decompose",
        "language": "r",
        "package": "stats",
        "description": "Decompose a time series into seasonal, trend and irregular components using moving averages. Deals with additive or multiplicative seasonal component."
    },
    {
        "name": "delete.response",
        "language": "r",
        "package": "stats",
        "description": "‘delete.response’ returns a ‘terms’ object for the same model but with no response variable. ‘drop.terms’ removes variables from the right-hand side of the model. There is also a ‘\"[.terms\"’ method to perform the same function (with ‘keep.response = TRUE’). ‘reformulate’ creates a formula from a character vector. If ‘length(termlabels) > 1’, its elements are concatenated with ‘+’. Non-syntactic names (e.g. containing spaces or special characters; see ‘make.names’) must be protected with backticks (see examples). A non-‘parse’able ‘response’ still works for now, back compatibly, with a deprecation warning."
    },
    {
        "name": "deltat",
        "language": "r",
        "package": "stats",
        "description": "‘time’ creates the vector of times at which a time series was sampled. ‘cycle’ gives the positions in the cycle of each observation. ‘frequency’ returns the number of samples per unit time and ‘deltat’ the time interval between observations (see ‘ts’)."
    },
    {
        "name": "dendrapply",
        "language": "r",
        "package": "stats",
        "description": "Apply function ‘FUN’ to each node of a ‘dendrogram’ recursively. When ‘y <- dendrapply(x, fn)’, then ‘y’ is a dendrogram of the same graph structure as ‘x’ and for each node, ‘y.node[j] <- FUN( x.node[j], ...)’ (where ‘y.node[j]’ is an (invalid!) notation for the j-th node of y)."
    },
    {
        "name": "density",
        "language": "r",
        "package": "stats",
        "description": "The (S3) generic function ‘density’ computes kernel density estimates. Its default method does so with the given kernel and bandwidth for univariate observations."
    },
    {
        "name": "density.default",
        "language": "r",
        "package": "stats",
        "description": "The (S3) generic function ‘density’ computes kernel density estimates. Its default method does so with the given kernel and bandwidth for univariate observations."
    },
    {
        "name": "deriv",
        "language": "r",
        "package": "stats",
        "description": "Compute derivatives of simple expressions, symbolically and algorithmically."
    },
    {
        "name": "deriv3",
        "language": "r",
        "package": "stats",
        "description": "Compute derivatives of simple expressions, symbolically and algorithmically."
    },
    {
        "name": "deviance",
        "language": "r",
        "package": "stats",
        "description": "Returns the deviance of a fitted model object."
    },
    {
        "name": "dexp",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the exponential distribution with rate ‘rate’ (i.e., mean ‘1/rate’)."
    },
    {
        "name": "df",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the F distribution with ‘df1’ and ‘df2’ degrees of freedom (and optional non-centrality parameter ‘ncp’)."
    },
    {
        "name": "df.kernel",
        "language": "r",
        "package": "stats",
        "description": "The ‘\"tskernel\"’ class is designed to represent discrete symmetric normalized smoothing kernels. These kernels can be used to smooth vectors, matrices, or time series objects. There are ‘print’, ‘plot’ and ‘[’ methods for these kernel objects."
    },
    {
        "name": "df.residual",
        "language": "r",
        "package": "stats",
        "description": "Returns the residual degrees-of-freedom extracted from a fitted model object."
    },
    {
        "name": "dfbeta",
        "language": "r",
        "package": "stats",
        "description": "This suite of functions can be used to compute some of the regression (leave-one-out deletion) diagnostics for linear and generalized linear models discussed in Belsley, Kuh and Welsch (1980), Cook and Weisberg (1982), etc."
    },
    {
        "name": "dfbetas",
        "language": "r",
        "package": "stats",
        "description": "This suite of functions can be used to compute some of the regression (leave-one-out deletion) diagnostics for linear and generalized linear models discussed in Belsley, Kuh and Welsch (1980), Cook and Weisberg (1982), etc."
    },
    {
        "name": "dffits",
        "language": "r",
        "package": "stats",
        "description": "This suite of functions can be used to compute some of the regression (leave-one-out deletion) diagnostics for linear and generalized linear models discussed in Belsley, Kuh and Welsch (1980), Cook and Weisberg (1982), etc."
    },
    {
        "name": "dgamma",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the Gamma distribution with parameters ‘shape’ and ‘scale’."
    },
    {
        "name": "dgeom",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the geometric distribution with parameter ‘prob’."
    },
    {
        "name": "dhyper",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the hypergeometric distribution."
    },
    {
        "name": "diffinv",
        "language": "r",
        "package": "stats",
        "description": "Computes the inverse function of the lagged differences function ‘diff’."
    },
    {
        "name": "dist",
        "language": "r",
        "package": "stats",
        "description": "This function computes and returns the distance matrix computed by using the specified distance measure to compute the distances between the rows of a data matrix."
    },
    {
        "name": "dlnorm",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the log normal distribution whose logarithm has mean equal to ‘meanlog’ and standard deviation equal to ‘sdlog’."
    },
    {
        "name": "dlogis",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the logistic distribution with parameters ‘location’ and ‘scale’."
    },
    {
        "name": "dmultinom",
        "language": "r",
        "package": "stats",
        "description": "Generate multinomially distributed random number vectors and compute multinomial probabilities."
    },
    {
        "name": "dnbinom",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the negative binomial distribution with parameters ‘size’ and ‘prob’."
    },
    {
        "name": "dnorm",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the normal distribution with mean equal to ‘mean’ and standard deviation equal to ‘sd’."
    },
    {
        "name": "dpois",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the Poisson distribution with parameter ‘lambda’."
    },
    {
        "name": "drop.scope",
        "language": "r",
        "package": "stats",
        "description": "‘add.scope’ and ‘drop.scope’ compute those terms that can be individually added to or dropped from a model while respecting the hierarchy of terms."
    },
    {
        "name": "drop.terms",
        "language": "r",
        "package": "stats",
        "description": "‘delete.response’ returns a ‘terms’ object for the same model but with no response variable. ‘drop.terms’ removes variables from the right-hand side of the model. There is also a ‘\"[.terms\"’ method to perform the same function (with ‘keep.response = TRUE’). ‘reformulate’ creates a formula from a character vector. If ‘length(termlabels) > 1’, its elements are concatenated with ‘+’. Non-syntactic names (e.g. containing spaces or special characters; see ‘make.names’) must be protected with backticks (see examples). A non-‘parse’able ‘response’ still works for now, back compatibly, with a deprecation warning."
    },
    {
        "name": "drop1",
        "language": "r",
        "package": "stats",
        "description": "Compute all the single terms in the ‘scope’ argument that can be added to or dropped from the model, fit those models and compute a table of the changes in fit."
    },
    {
        "name": "dsignrank",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the distribution of the Wilcoxon Signed Rank statistic obtained from a sample with size ‘n’."
    },
    {
        "name": "dt",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the t distribution with ‘df’ degrees of freedom (and optional non-centrality parameter ‘ncp’)."
    },
    {
        "name": "dummy.coef",
        "language": "r",
        "package": "stats",
        "description": "This extracts coefficients in terms of the original levels of the coefficients rather than the coded variables."
    },
    {
        "name": "dummy.coef.lm",
        "language": "r",
        "package": "stats",
        "description": "This extracts coefficients in terms of the original levels of the coefficients rather than the coded variables."
    },
    {
        "name": "dunif",
        "language": "r",
        "package": "stats",
        "description": "These functions provide information about the uniform distribution on the interval from ‘min’ to ‘max’. ‘dunif’ gives the density, ‘punif’ gives the distribution function ‘qunif’ gives the quantile function and ‘runif’ generates random deviates."
    },
    {
        "name": "dweibull",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the Weibull distribution with parameters ‘shape’ and ‘scale’."
    },
    {
        "name": "dwilcox",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the distribution of the Wilcoxon rank sum statistic obtained from samples with size ‘m’ and ‘n’, respectively."
    },
    {
        "name": "ecdf",
        "language": "r",
        "package": "stats",
        "description": "Compute an empirical cumulative distribution function, with several methods for plotting, printing and computing with such an “ecdf” object."
    },
    {
        "name": "eff.aovlist",
        "language": "r",
        "package": "stats",
        "description": "Computes the efficiencies of fixed-effect terms in an analysis of variance model with multiple strata."
    },
    {
        "name": "effects",
        "language": "r",
        "package": "stats",
        "description": "Returns (orthogonal) effects from a fitted model, usually a linear model. This is a generic function, but currently only has a methods for objects inheriting from classes ‘\"lm\"’ and ‘\"glm\"’."
    },
    {
        "name": "embed",
        "language": "r",
        "package": "stats",
        "description": "Embeds the time series ‘x’ into a low-dimensional Euclidean space."
    },
    {
        "name": "end",
        "language": "r",
        "package": "stats",
        "description": "Extract and encode the times the first and last observations were taken. Provided only for compatibility with S version 2."
    },
    {
        "name": "estVar",
        "language": "r",
        "package": "stats",
        "description": "Functions to compute matrix of residual sums of squares and products, or the estimated variance matrix for multivariate linear models."
    },
    {
        "name": "expand.model.frame",
        "language": "r",
        "package": "stats",
        "description": "Evaluates new variables as if they had been part of the formula of the specified model. This ensures that the same ‘na.action’ and ‘subset’ arguments are applied and allows, for example, ‘x’ to be recovered for a model using ‘sin(x)’ as a predictor."
    },
    {
        "name": "extractAIC",
        "language": "r",
        "package": "stats",
        "description": "Computes the (generalized) Akaike *A*n *I*nformation *C*riterion for a fitted parametric model."
    },
    {
        "name": "factanal",
        "language": "r",
        "package": "stats",
        "description": "Perform maximum-likelihood factor analysis on a covariance matrix or data matrix."
    },
    {
        "name": "factor.scope",
        "language": "r",
        "package": "stats",
        "description": "‘add.scope’ and ‘drop.scope’ compute those terms that can be individually added to or dropped from a model while respecting the hierarchy of terms."
    },
    {
        "name": "family",
        "language": "r",
        "package": "stats",
        "description": "Family objects provide a convenient way to specify the details of the models used by functions such as ‘glm’. See the documentation for ‘glm’ for the details on how such model fitting takes place."
    },
    {
        "name": "fft",
        "language": "r",
        "package": "stats",
        "description": "Computes the Discrete Fourier Transform (DFT) of an array with a fast algorithm, the “Fast Fourier Transform” (FFT)."
    },
    {
        "name": "filter",
        "language": "r",
        "package": "stats",
        "description": "Applies linear filtering to a univariate time series or to each series separately of a multivariate time series."
    },
    {
        "name": "fisher.test",
        "language": "r",
        "package": "stats",
        "description": "Performs Fisher's exact test for testing the null of independence of rows and columns in a contingency table with fixed marginals."
    },
    {
        "name": "fitted",
        "language": "r",
        "package": "stats",
        "description": "‘fitted’ is a generic function which extracts fitted values from objects returned by modeling functions. ‘fitted.values’ is an alias for it. All object classes which are returned by model fitting functions should provide a ‘fitted’ method. (Note that the generic is ‘fitted’ and not ‘fitted.values’.) Methods can make use of ‘napredict’ methods to compensate for the omission of missing values. The default and ‘nls’ methods do."
    },
    {
        "name": "fitted.values",
        "language": "r",
        "package": "stats",
        "description": "‘fitted’ is a generic function which extracts fitted values from objects returned by modeling functions. ‘fitted.values’ is an alias for it. All object classes which are returned by model fitting functions should provide a ‘fitted’ method. (Note that the generic is ‘fitted’ and not ‘fitted.values’.) Methods can make use of ‘napredict’ methods to compensate for the omission of missing values. The default and ‘nls’ methods do."
    },
    {
        "name": "fivenum",
        "language": "r",
        "package": "stats",
        "description": "Returns Tukey's five number summary (minimum, lower-hinge, median, upper-hinge, maximum) for the input data."
    },
    {
        "name": "fligner.test",
        "language": "r",
        "package": "stats",
        "description": "Performs a Fligner-Killeen (median) test of the null that the variances in each of the groups (samples) are the same."
    },
    {
        "name": "formula",
        "language": "r",
        "package": "stats",
        "description": "The generic function ‘formula’ and its specific methods provide a way of extracting formulae which have been included in other objects. ‘as.formula’ is almost identical, additionally preserving attributes when ‘object’ already inherits from ‘\"formula\"’."
    },
    {
        "name": "frequency",
        "language": "r",
        "package": "stats",
        "description": "‘time’ creates the vector of times at which a time series was sampled. ‘cycle’ gives the positions in the cycle of each observation. ‘frequency’ returns the number of samples per unit time and ‘deltat’ the time interval between observations (see ‘ts’)."
    },
    {
        "name": "friedman.test",
        "language": "r",
        "package": "stats",
        "description": "Performs a Friedman rank sum test with unreplicated blocked data."
    },
    {
        "name": "ftable",
        "language": "r",
        "package": "stats",
        "description": "Create ‘flat’ contingency tables."
    },
    {
        "name": "gaussian",
        "language": "r",
        "package": "stats",
        "description": "Family objects provide a convenient way to specify the details of the models used by functions such as ‘glm’. See the documentation for ‘glm’ for the details on how such model fitting takes place."
    },
    {
        "name": "getCall",
        "language": "r",
        "package": "stats",
        "description": "‘update’ will update and (by default) re-fit a model. It does this by extracting the call stored in the object, updating the call and (by default) evaluating that call. Sometimes it is useful to call ‘update’ with only one argument, for example if the data frame has been corrected. “Extracting the call” in ‘update()’ and similar functions uses ‘getCall()’ which itself is a (S3) generic function with a default method that simply gets ‘x$call’. Because of this, ‘update()’ will often work (via its default method) on new model classes, either automatically, or by providing a simple ‘getCall()’ method for that class."
    },
    {
        "name": "getInitial",
        "language": "r",
        "package": "stats",
        "description": "This function evaluates initial parameter estimates for a nonlinear regression model. If ‘data’ is a parameterized data frame or ‘pframe’ object, its ‘parameters’ attribute is returned. Otherwise the object is examined to see if it contains a call to a ‘selfStart’ object whose ‘initial’ attribute can be evaluated."
    },
    {
        "name": "get_all_vars",
        "language": "r",
        "package": "stats",
        "description": "‘model.frame’ (a generic function) and its methods return a ‘data.frame’ with the variables needed to use ‘formula’ and any ‘...’ arguments."
    },
    {
        "name": "glm",
        "language": "r",
        "package": "stats",
        "description": "‘glm’ is used to fit generalized linear models, specified by giving a symbolic description of the linear predictor and a description of the error distribution."
    },
    {
        "name": "glm.control",
        "language": "r",
        "package": "stats",
        "description": "Auxiliary function for ‘glm’ fitting. Typically only used internally by ‘glm.fit’, but may be used to construct a ‘control’ argument to either function."
    },
    {
        "name": "glm.fit",
        "language": "r",
        "package": "stats",
        "description": "‘glm’ is used to fit generalized linear models, specified by giving a symbolic description of the linear predictor and a description of the error distribution."
    },
    {
        "name": "hasTsp",
        "language": "r",
        "package": "stats",
        "description": "‘tsp’ returns the ‘tsp’ attribute (or ‘NULL’). It is included for compatibility with S version 2. ‘tsp<-’ sets the ‘tsp’ attribute. ‘hasTsp’ ensures ‘x’ has a ‘tsp’ attribute, by adding one if needed."
    },
    {
        "name": "hat",
        "language": "r",
        "package": "stats",
        "description": "This suite of functions can be used to compute some of the regression (leave-one-out deletion) diagnostics for linear and generalized linear models discussed in Belsley, Kuh and Welsch (1980), Cook and Weisberg (1982), etc."
    },
    {
        "name": "hatvalues",
        "language": "r",
        "package": "stats",
        "description": "This suite of functions can be used to compute some of the regression (leave-one-out deletion) diagnostics for linear and generalized linear models discussed in Belsley, Kuh and Welsch (1980), Cook and Weisberg (1982), etc."
    },
    {
        "name": "hclust",
        "language": "r",
        "package": "stats",
        "description": "Hierarchical cluster analysis on a set of dissimilarities and methods for analyzing it."
    },
    {
        "name": "heatmap",
        "language": "r",
        "package": "stats",
        "description": "A heat map is a false color image (basically ‘image(t(x))’) with a dendrogram added to the left side and to the top. Typically, reordering of the rows and columns according to some set of values (row or column means) within the restrictions imposed by the dendrogram is carried out."
    },
    {
        "name": "influence",
        "language": "r",
        "package": "stats",
        "description": "This function provides the basic quantities which are used in forming a wide variety of diagnostics for checking the quality of regression fits."
    },
    {
        "name": "influence.measures",
        "language": "r",
        "package": "stats",
        "description": "This suite of functions can be used to compute some of the regression (leave-one-out deletion) diagnostics for linear and generalized linear models discussed in Belsley, Kuh and Welsch (1980), Cook and Weisberg (1982), etc."
    },
    {
        "name": "integrate",
        "language": "r",
        "package": "stats",
        "description": "Adaptive quadrature of functions of one variable over a finite or infinite interval."
    },
    {
        "name": "interaction.plot",
        "language": "r",
        "package": "stats",
        "description": "Plots the mean (or other summary) of the response for two-way combinations of factors, thereby illustrating possible interactions."
    },
    {
        "name": "inverse.gaussian",
        "language": "r",
        "package": "stats",
        "description": "Family objects provide a convenient way to specify the details of the models used by functions such as ‘glm’. See the documentation for ‘glm’ for the details on how such model fitting takes place."
    },
    {
        "name": "is.empty.model",
        "language": "r",
        "package": "stats",
        "description": "R's formula notation allows models with no intercept and no predictors. These require special handling internally. ‘is.empty.model()’ checks whether an object describes an empty model."
    },
    {
        "name": "is.leaf",
        "language": "r",
        "package": "stats",
        "description": "Class ‘\"dendrogram\"’ provides general functions for handling tree-like structures. It is intended as a replacement for similar functions in hierarchical clustering and classification/regression trees, such that all of these can use the same engine for plotting or cutting trees."
    },
    {
        "name": "is.mts",
        "language": "r",
        "package": "stats",
        "description": "The function ‘ts’ is used to create time-series objects. ‘as.ts’ and ‘is.ts’ coerce an object to a time-series and test whether an object is a time series."
    },
    {
        "name": "is.stepfun",
        "language": "r",
        "package": "stats",
        "description": "Given the vectors (x[1], ..., x[n]) and (y[0], y[1], ..., y[n]) (one value more!), ‘stepfun(x, y, ...)’ returns an interpolating ‘step’ function, say ‘fn’. I.e., fn(t) = c[i] (constant) for t in ( x[i], x[i+1]) and at the abscissa values, if (by default) ‘right = FALSE’, fn(x[i]) = y[i] and for ‘right = TRUE’, fn(x[i]) = y[i-1], for i=1, ..., n. The value of the constant c[i] above depends on the ‘continuity’ parameter ‘f’. For the default, ‘right = FALSE, f = 0’, ‘fn’ is a _cadlag_ function, i.e., continuous from the right, limits from the left, so that the function is piecewise constant on intervals that include their _left_ endpoint. In general, c[i] is interpolated in between the neighbouring y values, c[i] = (1-f)*y[i] + f*y[i+1]. Therefore, for non-0 values of ‘f’, ‘fn’ may no longer be a proper step function, since it can be discontinuous from both sides, unless ‘right = TRUE, f = 1’ which is left-continuous (i.e., constant pieces contain their right endpoint)."
    },
    {
        "name": "is.ts",
        "language": "r",
        "package": "stats",
        "description": "The function ‘ts’ is used to create time-series objects. ‘as.ts’ and ‘is.ts’ coerce an object to a time-series and test whether an object is a time series."
    },
    {
        "name": "is.tskernel",
        "language": "r",
        "package": "stats",
        "description": "The ‘\"tskernel\"’ class is designed to represent discrete symmetric normalized smoothing kernels. These kernels can be used to smooth vectors, matrices, or time series objects. There are ‘print’, ‘plot’ and ‘[’ methods for these kernel objects."
    },
    {
        "name": "isoreg",
        "language": "r",
        "package": "stats",
        "description": "Compute the isotonic (monotonely increasing nonparametric) least squares regression which is piecewise constant."
    },
    {
        "name": "kernapply",
        "language": "r",
        "package": "stats",
        "description": "‘kernapply’ computes the convolution between an input sequence and a specific kernel."
    },
    {
        "name": "kernel",
        "language": "r",
        "package": "stats",
        "description": "The ‘\"tskernel\"’ class is designed to represent discrete symmetric normalized smoothing kernels. These kernels can be used to smooth vectors, matrices, or time series objects. There are ‘print’, ‘plot’ and ‘[’ methods for these kernel objects."
    },
    {
        "name": "kmeans",
        "language": "r",
        "package": "stats",
        "description": "Perform k-means clustering on a data matrix."
    },
    {
        "name": "knots",
        "language": "r",
        "package": "stats",
        "description": "Given the vectors (x[1], ..., x[n]) and (y[0], y[1], ..., y[n]) (one value more!), ‘stepfun(x, y, ...)’ returns an interpolating ‘step’ function, say ‘fn’. I.e., fn(t) = c[i] (constant) for t in ( x[i], x[i+1]) and at the abscissa values, if (by default) ‘right = FALSE’, fn(x[i]) = y[i] and for ‘right = TRUE’, fn(x[i]) = y[i-1], for i=1, ..., n. The value of the constant c[i] above depends on the ‘continuity’ parameter ‘f’. For the default, ‘right = FALSE, f = 0’, ‘fn’ is a _cadlag_ function, i.e., continuous from the right, limits from the left, so that the function is piecewise constant on intervals that include their _left_ endpoint. In general, c[i] is interpolated in between the neighbouring y values, c[i] = (1-f)*y[i] + f*y[i+1]. Therefore, for non-0 values of ‘f’, ‘fn’ may no longer be a proper step function, since it can be discontinuous from both sides, unless ‘right = TRUE, f = 1’ which is left-continuous (i.e., constant pieces contain their right endpoint)."
    },
    {
        "name": "kruskal.test",
        "language": "r",
        "package": "stats",
        "description": "Performs a Kruskal-Wallis rank sum test."
    },
    {
        "name": "ks.test",
        "language": "r",
        "package": "stats",
        "description": "Perform a one- or two-sample Kolmogorov-Smirnov test."
    },
    {
        "name": "ksmooth",
        "language": "r",
        "package": "stats",
        "description": "The Nadaraya-Watson kernel regression estimate."
    },
    {
        "name": "lag",
        "language": "r",
        "package": "stats",
        "description": "Compute a lagged version of a time series, shifting the time base back by a given number of observations. ‘lag’ is a generic function; this page documents its default method."
    },
    {
        "name": "lag.plot",
        "language": "r",
        "package": "stats",
        "description": "Plot time series against lagged versions of themselves. Helps visualizing ‘auto-dependence’ even when auto-correlations vanish."
    },
    {
        "name": "line",
        "language": "r",
        "package": "stats",
        "description": "Fit a line robustly as recommended in _Exploratory Data Analysis_. Currently by default (‘iter = 1’) the initial median-median line is _not_ iterated (as opposed to Tukey's “resistant line” in the references)."
    },
    {
        "name": "lm",
        "language": "r",
        "package": "stats",
        "description": "‘lm’ is used to fit linear models, including multivariate ones. It can be used to carry out regression, single stratum analysis of variance and analysis of covariance (although ‘aov’ may provide a more convenient interface for these)."
    },
    {
        "name": "lm.fit",
        "language": "r",
        "package": "stats",
        "description": "These are the basic computing engines called by ‘lm’ used to fit linear models. These should usually _not_ be used directly unless by experienced users. ‘.lm.fit()’ is a bare-bones wrapper to the innermost QR-based C code, on which ‘glm.fit’ and ‘lsfit’ are also based, for even more experienced users."
    },
    {
        "name": "lm.influence",
        "language": "r",
        "package": "stats",
        "description": "This function provides the basic quantities which are used in forming a wide variety of diagnostics for checking the quality of regression fits."
    },
    {
        "name": "lm.wfit",
        "language": "r",
        "package": "stats",
        "description": "These are the basic computing engines called by ‘lm’ used to fit linear models. These should usually _not_ be used directly unless by experienced users. ‘.lm.fit()’ is a bare-bones wrapper to the innermost QR-based C code, on which ‘glm.fit’ and ‘lsfit’ are also based, for even more experienced users."
    },
    {
        "name": "loadings",
        "language": "r",
        "package": "stats",
        "description": "Extract or print loadings in factor analysis (or principal components analysis)."
    },
    {
        "name": "loess",
        "language": "r",
        "package": "stats",
        "description": "Fit a polynomial surface determined by one or more numerical predictors, using local fitting."
    },
    {
        "name": "loess.control",
        "language": "r",
        "package": "stats",
        "description": "Set control parameters for ‘loess’ fits."
    },
    {
        "name": "loess.smooth",
        "language": "r",
        "package": "stats",
        "description": "Plot and add a smooth curve computed by ‘loess’ to a scatter plot."
    },
    {
        "name": "logLik",
        "language": "r",
        "package": "stats",
        "description": "This function is generic; method functions can be written to handle specific classes of objects. Classes which have methods for this function include: ‘\"glm\"’, ‘\"lm\"’, ‘\"nls\"’ and ‘\"Arima\"’. Packages contain methods for other classes, such as ‘\"fitdistr\"’, ‘\"negbin\"’ and ‘\"polr\"’ in package ‘MASS’, ‘\"multinom\"’ in package ‘nnet’ and ‘\"gls\"’, ‘\"gnls\"’ ‘\"lme\"’ and others in package ‘nlme’."
    },
    {
        "name": "loglin",
        "language": "r",
        "package": "stats",
        "description": "‘loglin’ is used to fit log-linear models to multidimensional contingency tables by Iterative Proportional Fitting."
    },
    {
        "name": "lowess",
        "language": "r",
        "package": "stats",
        "description": "This function performs the computations for the _LOWESS_ smoother which uses locally-weighted polynomial regression (see the references)."
    },
    {
        "name": "ls.diag",
        "language": "r",
        "package": "stats",
        "description": "Computes basic statistics, including standard errors, t- and p-values for the regression coefficients."
    },
    {
        "name": "ls.print",
        "language": "r",
        "package": "stats",
        "description": "Computes basic statistics, including standard errors, t- and p-values for the regression coefficients and prints them if ‘print.it’ is ‘TRUE’."
    },
    {
        "name": "lsfit",
        "language": "r",
        "package": "stats",
        "description": "The least squares estimate of *b* in the model y = X b + e is found."
    },
    {
        "name": "mad",
        "language": "r",
        "package": "stats",
        "description": "Compute the median absolute deviation, i.e., the (lo-/hi-) median of the absolute deviations from the median, and (by default) adjust by a factor for asymptotically normal consistency."
    },
    {
        "name": "mahalanobis",
        "language": "r",
        "package": "stats",
        "description": "Returns the squared Mahalanobis distance of all rows in ‘x’ and the vector mu = ‘center’ with respect to Sigma = ‘cov’. This is (for vector ‘x’) defined as D^2 = (x - mu)' Sigma^-1 (x - mu)"
    },
    {
        "name": "make.link",
        "language": "r",
        "package": "stats",
        "description": "This function is used with the ‘family’ functions in ‘glm()’. Given the name of a link, it returns a link function, an inverse link function, the derivative dmu/deta and a function for domain checking."
    },
    {
        "name": "makeARIMA",
        "language": "r",
        "package": "stats",
        "description": "Use Kalman Filtering to find the (Gaussian) log-likelihood, or for forecasting or smoothing."
    },
    {
        "name": "makepredictcall",
        "language": "r",
        "package": "stats",
        "description": "A utility to help ‘model.frame.default’ create the right matrices when predicting from models with terms like (univariate) ‘poly’ or ‘ns’."
    },
    {
        "name": "manova",
        "language": "r",
        "package": "stats",
        "description": "A class for the multivariate analysis of variance."
    },
    {
        "name": "mantelhaen.test",
        "language": "r",
        "package": "stats",
        "description": "Performs a Cochran-Mantel-Haenszel chi-squared test of the null that two nominal variables are conditionally independent in each stratum, assuming that there is no three-way interaction."
    },
    {
        "name": "mauchly.test",
        "language": "r",
        "package": "stats",
        "description": "Tests whether a Wishart-distributed covariance matrix (or transformation thereof) is proportional to a given matrix."
    },
    {
        "name": "mcnemar.test",
        "language": "r",
        "package": "stats",
        "description": "Performs McNemar's chi-squared test for symmetry of rows and columns in a two-dimensional contingency table."
    },
    {
        "name": "median",
        "language": "r",
        "package": "stats",
        "description": "Compute the sample median."
    },
    {
        "name": "median.default",
        "language": "r",
        "package": "stats",
        "description": "Compute the sample median."
    },
    {
        "name": "medpolish",
        "language": "r",
        "package": "stats",
        "description": "Fits an additive model (twoway decomposition) using Tukey's _median polish_ procedure."
    },
    {
        "name": "model.extract",
        "language": "r",
        "package": "stats",
        "description": "Returns the response, offset, subset, weights or other special components of a model frame passed as optional arguments to ‘model.frame’."
    },
    {
        "name": "model.frame",
        "language": "r",
        "package": "stats",
        "description": "‘model.frame’ (a generic function) and its methods return a ‘data.frame’ with the variables needed to use ‘formula’ and any ‘...’ arguments."
    },
    {
        "name": "model.frame.default",
        "language": "r",
        "package": "stats",
        "description": "‘model.frame’ (a generic function) and its methods return a ‘data.frame’ with the variables needed to use ‘formula’ and any ‘...’ arguments."
    },
    {
        "name": "model.matrix",
        "language": "r",
        "package": "stats",
        "description": "‘model.matrix’ creates a design (or model) matrix, e.g., by expanding factors to a set of dummy variables (depending on the contrasts) and expanding interactions similarly."
    },
    {
        "name": "model.matrix.default",
        "language": "r",
        "package": "stats",
        "description": "‘model.matrix’ creates a design (or model) matrix, e.g., by expanding factors to a set of dummy variables (depending on the contrasts) and expanding interactions similarly."
    },
    {
        "name": "model.matrix.lm",
        "language": "r",
        "package": "stats",
        "description": "‘model.matrix’ creates a design (or model) matrix, e.g., by expanding factors to a set of dummy variables (depending on the contrasts) and expanding interactions similarly."
    },
    {
        "name": "model.offset",
        "language": "r",
        "package": "stats",
        "description": "Returns the response, offset, subset, weights or other special components of a model frame passed as optional arguments to ‘model.frame’."
    },
    {
        "name": "model.response",
        "language": "r",
        "package": "stats",
        "description": "Returns the response, offset, subset, weights or other special components of a model frame passed as optional arguments to ‘model.frame’."
    },
    {
        "name": "model.tables",
        "language": "r",
        "package": "stats",
        "description": "Computes summary tables for model fits, especially complex ‘aov’ fits."
    },
    {
        "name": "model.weights",
        "language": "r",
        "package": "stats",
        "description": "Returns the response, offset, subset, weights or other special components of a model frame passed as optional arguments to ‘model.frame’."
    },
    {
        "name": "monthplot",
        "language": "r",
        "package": "stats",
        "description": "These functions plot seasonal (or other) subseries of a time series. For each season (or other category), a time series is plotted."
    },
    {
        "name": "mood.test",
        "language": "r",
        "package": "stats",
        "description": "Performs Mood's two-sample test for a difference in scale parameters."
    },
    {
        "name": "mvfft",
        "language": "r",
        "package": "stats",
        "description": "Computes the Discrete Fourier Transform (DFT) of an array with a fast algorithm, the “Fast Fourier Transform” (FFT)."
    },
    {
        "name": "na.action",
        "language": "r",
        "package": "stats",
        "description": "Extract information on the NA action used to create an object."
    },
    {
        "name": "na.contiguous",
        "language": "r",
        "package": "stats",
        "description": "Find the longest consecutive stretch of non-missing values in a time series object. (In the event of a tie, the first such stretch.)"
    },
    {
        "name": "na.exclude",
        "language": "r",
        "package": "stats",
        "description": "These generic functions are useful for dealing with ‘NA’s in e.g., data frames. ‘na.fail’ returns the object if it does not contain any missing values, and signals an error otherwise. ‘na.omit’ returns the object with incomplete cases removed. ‘na.pass’ returns the object unchanged."
    },
    {
        "name": "na.fail",
        "language": "r",
        "package": "stats",
        "description": "These generic functions are useful for dealing with ‘NA’s in e.g., data frames. ‘na.fail’ returns the object if it does not contain any missing values, and signals an error otherwise. ‘na.omit’ returns the object with incomplete cases removed. ‘na.pass’ returns the object unchanged."
    },
    {
        "name": "na.omit",
        "language": "r",
        "package": "stats",
        "description": "These generic functions are useful for dealing with ‘NA’s in e.g., data frames. ‘na.fail’ returns the object if it does not contain any missing values, and signals an error otherwise. ‘na.omit’ returns the object with incomplete cases removed. ‘na.pass’ returns the object unchanged."
    },
    {
        "name": "na.pass",
        "language": "r",
        "package": "stats",
        "description": "These generic functions are useful for dealing with ‘NA’s in e.g., data frames. ‘na.fail’ returns the object if it does not contain any missing values, and signals an error otherwise. ‘na.omit’ returns the object with incomplete cases removed. ‘na.pass’ returns the object unchanged."
    },
    {
        "name": "napredict",
        "language": "r",
        "package": "stats",
        "description": "Use missing value information to adjust residuals and predictions."
    },
    {
        "name": "naprint",
        "language": "r",
        "package": "stats",
        "description": "Use missing value information to report the effects of an ‘na.action’."
    },
    {
        "name": "naresid",
        "language": "r",
        "package": "stats",
        "description": "Use missing value information to adjust residuals and predictions."
    },
    {
        "name": "nextn",
        "language": "r",
        "package": "stats",
        "description": "‘nextn’ returns the smallest integer, greater than or equal to ‘n’, which can be obtained as a product of powers of the values contained in ‘factors’. ‘nextn()’ is intended to be used to find a suitable length to zero-pad the argument of ‘fft’ so that the transform is computed quickly. The default value for ‘factors’ ensures this."
    },
    {
        "name": "nlm",
        "language": "r",
        "package": "stats",
        "description": "This function carries out a minimization of the function ‘f’ using a Newton-type algorithm. See the references for details."
    },
    {
        "name": "nlminb",
        "language": "r",
        "package": "stats",
        "description": "Unconstrained and box-constrained optimization using PORT routines. For historical compatibility."
    },
    {
        "name": "nls",
        "language": "r",
        "package": "stats",
        "description": "Determine the nonlinear (weighted) least-squares estimates of the parameters of a nonlinear model."
    },
    {
        "name": "nls.control",
        "language": "r",
        "package": "stats",
        "description": "Allow the user to set some characteristics of the ‘nls’ nonlinear least squares algorithm."
    },
    {
        "name": "nobs",
        "language": "r",
        "package": "stats",
        "description": "Extract the number of ‘observations’ from a model fit. This is principally intended to be used in computing BIC (see ‘AIC’)."
    },
    {
        "name": "numericDeriv",
        "language": "r",
        "package": "stats",
        "description": "‘numericDeriv’ numerically evaluates the gradient of an expression."
    },
    {
        "name": "offset",
        "language": "r",
        "package": "stats",
        "description": "An offset is a term to be added to a linear predictor, such as in a generalised linear model, with known coefficient 1 rather than an estimated coefficient."
    },
    {
        "name": "oneway.test",
        "language": "r",
        "package": "stats",
        "description": "Test whether two or more samples from normal distributions have the same means. The variances are not necessarily assumed to be equal."
    },
    {
        "name": "optim",
        "language": "r",
        "package": "stats",
        "description": "General-purpose optimization based on Nelder-Mead, quasi-Newton and conjugate-gradient algorithms. It includes an option for box-constrained optimization and simulated annealing."
    },
    {
        "name": "optimHess",
        "language": "r",
        "package": "stats",
        "description": "General-purpose optimization based on Nelder-Mead, quasi-Newton and conjugate-gradient algorithms. It includes an option for box-constrained optimization and simulated annealing."
    },
    {
        "name": "optimise",
        "language": "r",
        "package": "stats",
        "description": "The function ‘optimize’ searches the interval from ‘lower’ to ‘upper’ for a minimum or maximum of the function ‘f’ with respect to its first argument. ‘optimise’ is an alias for ‘optimize’."
    },
    {
        "name": "optimize",
        "language": "r",
        "package": "stats",
        "description": "The function ‘optimize’ searches the interval from ‘lower’ to ‘upper’ for a minimum or maximum of the function ‘f’ with respect to its first argument. ‘optimise’ is an alias for ‘optimize’."
    },
    {
        "name": "order.dendrogram",
        "language": "r",
        "package": "stats",
        "description": "Theses functions return the order (index) or the ‘\"label\"’ attribute for the leaves in a dendrogram. These indices can then be used to access the appropriate components of any additional data."
    },
    {
        "name": "p.adjust",
        "language": "r",
        "package": "stats",
        "description": "Given a set of p-values, returns p-values adjusted using one of several methods."
    },
    {
        "name": "pacf",
        "language": "r",
        "package": "stats",
        "description": "The function ‘acf’ computes (and by default plots) estimates of the autocovariance or autocorrelation function. Function ‘pacf’ is the function used for the partial autocorrelations. Function ‘ccf’ computes the cross-correlation or cross-covariance of two univariate series."
    },
    {
        "name": "pairwise.prop.test",
        "language": "r",
        "package": "stats",
        "description": "Calculate pairwise comparisons between pairs of proportions with correction for multiple testing"
    },
    {
        "name": "pairwise.t.test",
        "language": "r",
        "package": "stats",
        "description": "Calculate pairwise comparisons between group levels with corrections for multiple testing"
    },
    {
        "name": "pairwise.table",
        "language": "r",
        "package": "stats",
        "description": "Creates table of p values for pairwise comparisons with corrections for multiple testing."
    },
    {
        "name": "pairwise.wilcox.test",
        "language": "r",
        "package": "stats",
        "description": "Calculate pairwise comparisons between group levels with corrections for multiple testing."
    },
    {
        "name": "pbeta",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the Beta distribution with parameters ‘shape1’ and ‘shape2’ (and optional non-centrality parameter ‘ncp’)."
    },
    {
        "name": "pbinom",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the binomial distribution with parameters ‘size’ and ‘prob’. This is conventionally interpreted as the number of ‘successes’ in ‘size’ trials."
    },
    {
        "name": "pbirthday",
        "language": "r",
        "package": "stats",
        "description": "Computes answers to a generalised _birthday paradox_ problem. ‘pbirthday’ computes the probability of a coincidence and ‘qbirthday’ computes the smallest number of observations needed to have at least a specified probability of coincidence."
    },
    {
        "name": "pcauchy",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the Cauchy distribution with location parameter ‘location’ and scale parameter ‘scale’."
    },
    {
        "name": "pchisq",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the chi-squared (chi^2) distribution with ‘df’ degrees of freedom and optional non-centrality parameter ‘ncp’."
    },
    {
        "name": "pexp",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the exponential distribution with rate ‘rate’ (i.e., mean ‘1/rate’)."
    },
    {
        "name": "pf",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the F distribution with ‘df1’ and ‘df2’ degrees of freedom (and optional non-centrality parameter ‘ncp’)."
    },
    {
        "name": "pgamma",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the Gamma distribution with parameters ‘shape’ and ‘scale’."
    },
    {
        "name": "pgeom",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the geometric distribution with parameter ‘prob’."
    },
    {
        "name": "phyper",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the hypergeometric distribution."
    },
    {
        "name": "plclust",
        "language": "r",
        "package": "stats",
        "description": "The functions or variables listed here are no longer part of R as they are not needed (any more)."
    },
    {
        "name": "plnorm",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the log normal distribution whose logarithm has mean equal to ‘meanlog’ and standard deviation equal to ‘sdlog’."
    },
    {
        "name": "plogis",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the logistic distribution with parameters ‘location’ and ‘scale’."
    },
    {
        "name": "plot.ecdf",
        "language": "r",
        "package": "stats",
        "description": "Compute an empirical cumulative distribution function, with several methods for plotting, printing and computing with such an “ecdf” object."
    },
    {
        "name": "plot.spec.coherency",
        "language": "r",
        "package": "stats",
        "description": "Plotting method for objects of class ‘\"spec\"’. For multivariate time series it plots the marginal spectra of the series or pairs plots of the coherency and phase of the cross-spectra."
    },
    {
        "name": "plot.spec.phase",
        "language": "r",
        "package": "stats",
        "description": "Plotting method for objects of class ‘\"spec\"’. For multivariate time series it plots the marginal spectra of the series or pairs plots of the coherency and phase of the cross-spectra."
    },
    {
        "name": "plot.stepfun",
        "language": "r",
        "package": "stats",
        "description": "Method of the generic ‘plot’ for ‘stepfun’ objects and utility for plotting piecewise constant functions."
    },
    {
        "name": "plot.ts",
        "language": "r",
        "package": "stats",
        "description": "Plotting method for objects inheriting from class ‘\"ts\"’."
    },
    {
        "name": "pnbinom",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the negative binomial distribution with parameters ‘size’ and ‘prob’."
    },
    {
        "name": "pnorm",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the normal distribution with mean equal to ‘mean’ and standard deviation equal to ‘sd’."
    },
    {
        "name": "poisson",
        "language": "r",
        "package": "stats",
        "description": "Family objects provide a convenient way to specify the details of the models used by functions such as ‘glm’. See the documentation for ‘glm’ for the details on how such model fitting takes place."
    },
    {
        "name": "poisson.test",
        "language": "r",
        "package": "stats",
        "description": "Performs an exact test of a simple null hypothesis about the rate parameter in Poisson distribution, or for the ratio between two rate parameters."
    },
    {
        "name": "poly",
        "language": "r",
        "package": "stats",
        "description": "Returns or evaluates orthogonal polynomials of degree 1 to ‘degree’ over the specified set of points ‘x’: these are all orthogonal to the constant polynomial of degree 0. Alternatively, evaluate raw polynomials."
    },
    {
        "name": "polym",
        "language": "r",
        "package": "stats",
        "description": "Returns or evaluates orthogonal polynomials of degree 1 to ‘degree’ over the specified set of points ‘x’: these are all orthogonal to the constant polynomial of degree 0. Alternatively, evaluate raw polynomials."
    },
    {
        "name": "power",
        "language": "r",
        "package": "stats",
        "description": "Creates a link object based on the link function eta = mu ^ lambda."
    },
    {
        "name": "power.anova.test",
        "language": "r",
        "package": "stats",
        "description": "Compute power of test or determine parameters to obtain target power."
    },
    {
        "name": "power.prop.test",
        "language": "r",
        "package": "stats",
        "description": "Compute the power of the two-sample test for proportions, or determine parameters to obtain a target power."
    },
    {
        "name": "power.t.test",
        "language": "r",
        "package": "stats",
        "description": "Compute the power of the one- or two- sample t test, or determine parameters to obtain a target power."
    },
    {
        "name": "ppoints",
        "language": "r",
        "package": "stats",
        "description": "Generates the sequence of probability points ‘(1:m - a)/(m + (1-a)-a)’ where ‘m’ is either ‘n’, if ‘length(n)==1’, or ‘length(n)’."
    },
    {
        "name": "ppois",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the Poisson distribution with parameter ‘lambda’."
    },
    {
        "name": "ppr",
        "language": "r",
        "package": "stats",
        "description": "Fit a projection pursuit regression model."
    },
    {
        "name": "prcomp",
        "language": "r",
        "package": "stats",
        "description": "Performs a principal components analysis on the given data matrix and returns the results as an object of class ‘prcomp’."
    },
    {
        "name": "predict",
        "language": "r",
        "package": "stats",
        "description": "‘predict’ is a generic function for predictions from the results of various model fitting functions. The function invokes particular _methods_ which depend on the ‘class’ of the first argument."
    },
    {
        "name": "predict.glm",
        "language": "r",
        "package": "stats",
        "description": "Obtains predictions and optionally estimates standard errors of those predictions from a fitted generalized linear model object."
    },
    {
        "name": "predict.lm",
        "language": "r",
        "package": "stats",
        "description": "Predicted values based on linear model object."
    },
    {
        "name": "preplot",
        "language": "r",
        "package": "stats",
        "description": "Compute an object to be used for plots relating to the given model object."
    },
    {
        "name": "princomp",
        "language": "r",
        "package": "stats",
        "description": "‘princomp’ performs a principal components analysis on the given numeric data matrix and returns the results as an object of class ‘princomp’."
    },
    {
        "name": "printCoefmat",
        "language": "r",
        "package": "stats",
        "description": "Utility function to be used in higher-level ‘print’ methods, such as those for ‘summary.lm’, ‘summary.glm’ and ‘anova’. The goal is to provide a flexible interface with smart defaults such that often, only ‘x’ needs to be specified."
    },
    {
        "name": "profile",
        "language": "r",
        "package": "stats",
        "description": "Investigates behavior of objective function near the solution represented by ‘fitted’. See documentation on method functions for further details."
    },
    {
        "name": "proj",
        "language": "r",
        "package": "stats",
        "description": "‘proj’ returns a matrix or list of matrices giving the projections of the data onto the terms of a linear model. It is most frequently used for ‘aov’ models."
    },
    {
        "name": "promax",
        "language": "r",
        "package": "stats",
        "description": "These functions ‘rotate’ loading matrices in factor analysis."
    },
    {
        "name": "prop.test",
        "language": "r",
        "package": "stats",
        "description": "‘prop.test’ can be used for testing the null that the proportions (probabilities of success) in several groups are the same, or that they equal certain given values."
    },
    {
        "name": "prop.trend.test",
        "language": "r",
        "package": "stats",
        "description": "Performs chi-squared test for trend in proportions, i.e., a test asymptotically optimal for local alternatives where the log odds vary in proportion with ‘score’. By default, ‘score’ is chosen as the group numbers."
    },
    {
        "name": "psignrank",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the distribution of the Wilcoxon Signed Rank statistic obtained from a sample with size ‘n’."
    },
    {
        "name": "psmirnov",
        "language": "r",
        "package": "stats",
        "description": "Distribution function, quantile function and random generation for the distribution of the Smirnov statistic."
    },
    {
        "name": "pt",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the t distribution with ‘df’ degrees of freedom (and optional non-centrality parameter ‘ncp’)."
    },
    {
        "name": "ptukey",
        "language": "r",
        "package": "stats",
        "description": "Functions of the distribution of the studentized range, R/s, where R is the range of a standard normal sample and df*s^2 is independently distributed as chi-squared with df degrees of freedom, see ‘pchisq’."
    },
    {
        "name": "punif",
        "language": "r",
        "package": "stats",
        "description": "These functions provide information about the uniform distribution on the interval from ‘min’ to ‘max’. ‘dunif’ gives the density, ‘punif’ gives the distribution function ‘qunif’ gives the quantile function and ‘runif’ generates random deviates."
    },
    {
        "name": "pweibull",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the Weibull distribution with parameters ‘shape’ and ‘scale’."
    },
    {
        "name": "pwilcox",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the distribution of the Wilcoxon rank sum statistic obtained from samples with size ‘m’ and ‘n’, respectively."
    },
    {
        "name": "qbeta",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the Beta distribution with parameters ‘shape1’ and ‘shape2’ (and optional non-centrality parameter ‘ncp’)."
    },
    {
        "name": "qbinom",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the binomial distribution with parameters ‘size’ and ‘prob’. This is conventionally interpreted as the number of ‘successes’ in ‘size’ trials."
    },
    {
        "name": "qbirthday",
        "language": "r",
        "package": "stats",
        "description": "Computes answers to a generalised _birthday paradox_ problem. ‘pbirthday’ computes the probability of a coincidence and ‘qbirthday’ computes the smallest number of observations needed to have at least a specified probability of coincidence."
    },
    {
        "name": "qcauchy",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the Cauchy distribution with location parameter ‘location’ and scale parameter ‘scale’."
    },
    {
        "name": "qchisq",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the chi-squared (chi^2) distribution with ‘df’ degrees of freedom and optional non-centrality parameter ‘ncp’."
    },
    {
        "name": "qexp",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the exponential distribution with rate ‘rate’ (i.e., mean ‘1/rate’)."
    },
    {
        "name": "qf",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the F distribution with ‘df1’ and ‘df2’ degrees of freedom (and optional non-centrality parameter ‘ncp’)."
    },
    {
        "name": "qgamma",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the Gamma distribution with parameters ‘shape’ and ‘scale’."
    },
    {
        "name": "qgeom",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the geometric distribution with parameter ‘prob’."
    },
    {
        "name": "qhyper",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the hypergeometric distribution."
    },
    {
        "name": "qlnorm",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the log normal distribution whose logarithm has mean equal to ‘meanlog’ and standard deviation equal to ‘sdlog’."
    },
    {
        "name": "qlogis",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the logistic distribution with parameters ‘location’ and ‘scale’."
    },
    {
        "name": "qnbinom",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the negative binomial distribution with parameters ‘size’ and ‘prob’."
    },
    {
        "name": "qnorm",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the normal distribution with mean equal to ‘mean’ and standard deviation equal to ‘sd’."
    },
    {
        "name": "qpois",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the Poisson distribution with parameter ‘lambda’."
    },
    {
        "name": "qqline",
        "language": "r",
        "package": "stats",
        "description": "‘qqnorm’ is a generic function the default method of which produces a normal QQ plot of the values in ‘y’. ‘qqline’ adds a line to a “theoretical”, by default normal, quantile-quantile plot which passes through the ‘probs’ quantiles, by default the first and third quartiles. ‘qqplot’ produces a QQ plot of two datasets. If ‘conf.level’ is given, a confidence band for a function transforming the distribution of ‘x’ into the distribution of ‘y’ is plotted based on Switzer (1976). The QQ plot can be understood as an estimate of such a treatment function. If ‘exact = NULL’ (the default), an exact confidence band is computed if the product of the sample sizes is less than 10000, with or without ties. Otherwise, asymptotic distributions are used whose approximations may be inaccurate in small samples. Monte-Carlo approximations based on ‘B’ random permutations are computed when ‘simulate = TRUE’. Confidence bands are in agreement with Smirnov's test, that is, the bisecting line is covered by the band iff the null of both samples coming from the same distribution cannot be rejected at the same level. Graphical parameters may be given as arguments to ‘qqnorm’, ‘qqplot’ and ‘qqline’."
    },
    {
        "name": "qqnorm",
        "language": "r",
        "package": "stats",
        "description": "‘qqnorm’ is a generic function the default method of which produces a normal QQ plot of the values in ‘y’. ‘qqline’ adds a line to a “theoretical”, by default normal, quantile-quantile plot which passes through the ‘probs’ quantiles, by default the first and third quartiles. ‘qqplot’ produces a QQ plot of two datasets. If ‘conf.level’ is given, a confidence band for a function transforming the distribution of ‘x’ into the distribution of ‘y’ is plotted based on Switzer (1976). The QQ plot can be understood as an estimate of such a treatment function. If ‘exact = NULL’ (the default), an exact confidence band is computed if the product of the sample sizes is less than 10000, with or without ties. Otherwise, asymptotic distributions are used whose approximations may be inaccurate in small samples. Monte-Carlo approximations based on ‘B’ random permutations are computed when ‘simulate = TRUE’. Confidence bands are in agreement with Smirnov's test, that is, the bisecting line is covered by the band iff the null of both samples coming from the same distribution cannot be rejected at the same level. Graphical parameters may be given as arguments to ‘qqnorm’, ‘qqplot’ and ‘qqline’."
    },
    {
        "name": "qqplot",
        "language": "r",
        "package": "stats",
        "description": "‘qqnorm’ is a generic function the default method of which produces a normal QQ plot of the values in ‘y’. ‘qqline’ adds a line to a “theoretical”, by default normal, quantile-quantile plot which passes through the ‘probs’ quantiles, by default the first and third quartiles. ‘qqplot’ produces a QQ plot of two datasets. If ‘conf.level’ is given, a confidence band for a function transforming the distribution of ‘x’ into the distribution of ‘y’ is plotted based on Switzer (1976). The QQ plot can be understood as an estimate of such a treatment function. If ‘exact = NULL’ (the default), an exact confidence band is computed if the product of the sample sizes is less than 10000, with or without ties. Otherwise, asymptotic distributions are used whose approximations may be inaccurate in small samples. Monte-Carlo approximations based on ‘B’ random permutations are computed when ‘simulate = TRUE’. Confidence bands are in agreement with Smirnov's test, that is, the bisecting line is covered by the band iff the null of both samples coming from the same distribution cannot be rejected at the same level. Graphical parameters may be given as arguments to ‘qqnorm’, ‘qqplot’ and ‘qqline’."
    },
    {
        "name": "qsignrank",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the distribution of the Wilcoxon Signed Rank statistic obtained from a sample with size ‘n’."
    },
    {
        "name": "qsmirnov",
        "language": "r",
        "package": "stats",
        "description": "Distribution function, quantile function and random generation for the distribution of the Smirnov statistic."
    },
    {
        "name": "qt",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the t distribution with ‘df’ degrees of freedom (and optional non-centrality parameter ‘ncp’)."
    },
    {
        "name": "qtukey",
        "language": "r",
        "package": "stats",
        "description": "Functions of the distribution of the studentized range, R/s, where R is the range of a standard normal sample and df*s^2 is independently distributed as chi-squared with df degrees of freedom, see ‘pchisq’."
    },
    {
        "name": "quade.test",
        "language": "r",
        "package": "stats",
        "description": "Performs a Quade test with unreplicated blocked data."
    },
    {
        "name": "quantile",
        "language": "r",
        "package": "stats",
        "description": "The generic function ‘quantile’ produces sample quantiles corresponding to the given probabilities. The smallest observation corresponds to a probability of 0 and the largest to a probability of 1."
    },
    {
        "name": "quasi",
        "language": "r",
        "package": "stats",
        "description": "Family objects provide a convenient way to specify the details of the models used by functions such as ‘glm’. See the documentation for ‘glm’ for the details on how such model fitting takes place."
    },
    {
        "name": "quasibinomial",
        "language": "r",
        "package": "stats",
        "description": "Family objects provide a convenient way to specify the details of the models used by functions such as ‘glm’. See the documentation for ‘glm’ for the details on how such model fitting takes place."
    },
    {
        "name": "quasipoisson",
        "language": "r",
        "package": "stats",
        "description": "Family objects provide a convenient way to specify the details of the models used by functions such as ‘glm’. See the documentation for ‘glm’ for the details on how such model fitting takes place."
    },
    {
        "name": "qunif",
        "language": "r",
        "package": "stats",
        "description": "These functions provide information about the uniform distribution on the interval from ‘min’ to ‘max’. ‘dunif’ gives the density, ‘punif’ gives the distribution function ‘qunif’ gives the quantile function and ‘runif’ generates random deviates."
    },
    {
        "name": "qweibull",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the Weibull distribution with parameters ‘shape’ and ‘scale’."
    },
    {
        "name": "qwilcox",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the distribution of the Wilcoxon rank sum statistic obtained from samples with size ‘m’ and ‘n’, respectively."
    },
    {
        "name": "r2dtable",
        "language": "r",
        "package": "stats",
        "description": "Generate random 2-way tables with given marginals using Patefield's algorithm."
    },
    {
        "name": "rWishart",
        "language": "r",
        "package": "stats",
        "description": "Generate ‘n’ random matrices, distributed according to the Wishart distribution with parameters ‘Sigma’ and ‘df’, W_p(Sigma, df)."
    },
    {
        "name": "rbeta",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the Beta distribution with parameters ‘shape1’ and ‘shape2’ (and optional non-centrality parameter ‘ncp’)."
    },
    {
        "name": "rbinom",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the binomial distribution with parameters ‘size’ and ‘prob’. This is conventionally interpreted as the number of ‘successes’ in ‘size’ trials."
    },
    {
        "name": "rcauchy",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the Cauchy distribution with location parameter ‘location’ and scale parameter ‘scale’."
    },
    {
        "name": "rchisq",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the chi-squared (chi^2) distribution with ‘df’ degrees of freedom and optional non-centrality parameter ‘ncp’."
    },
    {
        "name": "read.ftable",
        "language": "r",
        "package": "stats",
        "description": "Read, write and coerce ‘flat’ (contingency) tables, aka ‘ftable’s."
    },
    {
        "name": "rect.hclust",
        "language": "r",
        "package": "stats",
        "description": "Draws rectangles around the branches of a dendrogram highlighting the corresponding clusters. First the dendrogram is cut at a certain level, then a rectangle is drawn around selected branches."
    },
    {
        "name": "reformulate",
        "language": "r",
        "package": "stats",
        "description": "‘delete.response’ returns a ‘terms’ object for the same model but with no response variable. ‘drop.terms’ removes variables from the right-hand side of the model. There is also a ‘\"[.terms\"’ method to perform the same function (with ‘keep.response = TRUE’). ‘reformulate’ creates a formula from a character vector. If ‘length(termlabels) > 1’, its elements are concatenated with ‘+’. Non-syntactic names (e.g. containing spaces or special characters; see ‘make.names’) must be protected with backticks (see examples). A non-‘parse’able ‘response’ still works for now, back compatibly, with a deprecation warning."
    },
    {
        "name": "relevel",
        "language": "r",
        "package": "stats",
        "description": "The levels of a factor are re-ordered so that the level specified by ‘ref’ is first and the others are moved down. This is useful for ‘contr.treatment’ contrasts which take the first level as the reference."
    },
    {
        "name": "reorder",
        "language": "r",
        "package": "stats",
        "description": "‘reorder’ is a generic function. The ‘\"default\"’ method treats its first argument as a categorical variable, and reorders its levels based on the values of a second variable, usually numeric."
    },
    {
        "name": "replications",
        "language": "r",
        "package": "stats",
        "description": "Returns a vector or a list of the number of replicates for each term in the formula."
    },
    {
        "name": "reshape",
        "language": "r",
        "package": "stats",
        "description": "This function reshapes a data frame between ‘wide’ format (with repeated measurements in separate columns of the same row) and ‘long’ format (with the repeated measurements in separate rows)."
    },
    {
        "name": "resid",
        "language": "r",
        "package": "stats",
        "description": "‘residuals’ is a generic function which extracts model residuals from objects returned by modeling functions. The abbreviated form ‘resid’ is an alias for ‘residuals’. It is intended to encourage users to access object components through an accessor function rather than by directly referencing an object slot. All object classes which are returned by model fitting functions should provide a ‘residuals’ method. (Note that the method is for ‘residuals’ and not ‘resid’.) Methods can make use of ‘naresid’ methods to compensate for the omission of missing values. The default, ‘nls’ and ‘smooth.spline’ methods do."
    },
    {
        "name": "residuals",
        "language": "r",
        "package": "stats",
        "description": "‘residuals’ is a generic function which extracts model residuals from objects returned by modeling functions. The abbreviated form ‘resid’ is an alias for ‘residuals’. It is intended to encourage users to access object components through an accessor function rather than by directly referencing an object slot. All object classes which are returned by model fitting functions should provide a ‘residuals’ method. (Note that the method is for ‘residuals’ and not ‘resid’.) Methods can make use of ‘naresid’ methods to compensate for the omission of missing values. The default, ‘nls’ and ‘smooth.spline’ methods do."
    },
    {
        "name": "residuals.glm",
        "language": "r",
        "package": "stats",
        "description": "These functions are all ‘methods’ for class ‘glm’ or ‘summary.glm’ objects."
    },
    {
        "name": "residuals.lm",
        "language": "r",
        "package": "stats",
        "description": "All these functions are ‘methods’ for class ‘\"lm\"’ objects."
    },
    {
        "name": "rexp",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the exponential distribution with rate ‘rate’ (i.e., mean ‘1/rate’)."
    },
    {
        "name": "rf",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the F distribution with ‘df1’ and ‘df2’ degrees of freedom (and optional non-centrality parameter ‘ncp’)."
    },
    {
        "name": "rgamma",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the Gamma distribution with parameters ‘shape’ and ‘scale’."
    },
    {
        "name": "rgeom",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the geometric distribution with parameter ‘prob’."
    },
    {
        "name": "rhyper",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the hypergeometric distribution."
    },
    {
        "name": "rlnorm",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the log normal distribution whose logarithm has mean equal to ‘meanlog’ and standard deviation equal to ‘sdlog’."
    },
    {
        "name": "rlogis",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the logistic distribution with parameters ‘location’ and ‘scale’."
    },
    {
        "name": "rmultinom",
        "language": "r",
        "package": "stats",
        "description": "Generate multinomially distributed random number vectors and compute multinomial probabilities."
    },
    {
        "name": "rnbinom",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the negative binomial distribution with parameters ‘size’ and ‘prob’."
    },
    {
        "name": "rnorm",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the normal distribution with mean equal to ‘mean’ and standard deviation equal to ‘sd’."
    },
    {
        "name": "rpois",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the Poisson distribution with parameter ‘lambda’."
    },
    {
        "name": "rsignrank",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the distribution of the Wilcoxon Signed Rank statistic obtained from a sample with size ‘n’."
    },
    {
        "name": "rsmirnov",
        "language": "r",
        "package": "stats",
        "description": "Distribution function, quantile function and random generation for the distribution of the Smirnov statistic."
    },
    {
        "name": "rstandard",
        "language": "r",
        "package": "stats",
        "description": "This suite of functions can be used to compute some of the regression (leave-one-out deletion) diagnostics for linear and generalized linear models discussed in Belsley, Kuh and Welsch (1980), Cook and Weisberg (1982), etc."
    },
    {
        "name": "rstudent",
        "language": "r",
        "package": "stats",
        "description": "This suite of functions can be used to compute some of the regression (leave-one-out deletion) diagnostics for linear and generalized linear models discussed in Belsley, Kuh and Welsch (1980), Cook and Weisberg (1982), etc."
    },
    {
        "name": "rt",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the t distribution with ‘df’ degrees of freedom (and optional non-centrality parameter ‘ncp’)."
    },
    {
        "name": "runif",
        "language": "r",
        "package": "stats",
        "description": "These functions provide information about the uniform distribution on the interval from ‘min’ to ‘max’. ‘dunif’ gives the density, ‘punif’ gives the distribution function ‘qunif’ gives the quantile function and ‘runif’ generates random deviates."
    },
    {
        "name": "runmed",
        "language": "r",
        "package": "stats",
        "description": "Compute running medians of odd span. This is the ‘most robust’ scatter plot smoothing possible. For efficiency (and historical reason), you can use one of two different algorithms giving identical results."
    },
    {
        "name": "rweibull",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the Weibull distribution with parameters ‘shape’ and ‘scale’."
    },
    {
        "name": "rwilcox",
        "language": "r",
        "package": "stats",
        "description": "Density, distribution function, quantile function and random generation for the distribution of the Wilcoxon rank sum statistic obtained from samples with size ‘m’ and ‘n’, respectively."
    },
    {
        "name": "scatter.smooth",
        "language": "r",
        "package": "stats",
        "description": "Plot and add a smooth curve computed by ‘loess’ to a scatter plot."
    },
    {
        "name": "screeplot",
        "language": "r",
        "package": "stats",
        "description": "‘screeplot.default’ plots the variances against the number of the principal component. This is also the ‘plot’ method for classes ‘\"princomp\"’ and ‘\"prcomp\"’."
    },
    {
        "name": "sd",
        "language": "r",
        "package": "stats",
        "description": "This function computes the standard deviation of the values in ‘x’. If ‘na.rm’ is ‘TRUE’ then missing values are removed before computation proceeds."
    },
    {
        "name": "se.contrast",
        "language": "r",
        "package": "stats",
        "description": "Returns the standard errors for one or more contrasts in an ‘aov’ object."
    },
    {
        "name": "selfStart",
        "language": "r",
        "package": "stats",
        "description": "Construct self-starting nonlinear models to be used in ‘nls’, etc. Via function ‘initial’ to compute approximate parameter values from data, such models are “self-starting”, i.e., do not need a ‘start’ argument in, e.g., ‘nls()’."
    },
    {
        "name": "setNames",
        "language": "r",
        "package": "stats",
        "description": "This is a convenience function that sets the names on an object and returns the object. It is most useful at the end of a function definition where one is creating the object to be returned and would prefer not to store it under a name just so the names can be assigned."
    },
    {
        "name": "shapiro.test",
        "language": "r",
        "package": "stats",
        "description": "Performs the Shapiro-Wilk test of normality."
    },
    {
        "name": "sigma",
        "language": "r",
        "package": "stats",
        "description": "Extract the estimated standard deviation of the errors, the “residual standard deviation” (misnamed also “residual standard error”, e.g., in ‘summary.lm()’'s output, from a fitted model). Many classical statistical models have a _scale parameter_, typically the standard deviation of a zero-mean normal (or Gaussian) random variable which is denoted as sigma. ‘sigma(.)’ extracts the _estimated_ parameter from a fitted model, i.e., sigma^."
    },
    {
        "name": "simulate",
        "language": "r",
        "package": "stats",
        "description": "Simulate one or more responses from the distribution corresponding to a fitted model object."
    },
    {
        "name": "smooth",
        "language": "r",
        "package": "stats",
        "description": "Tukey's smoothers, _3RS3R_, _3RSS_, _3R_, etc."
    },
    {
        "name": "smooth.spline",
        "language": "r",
        "package": "stats",
        "description": "Fits a cubic smoothing spline to the supplied data."
    },
    {
        "name": "smoothEnds",
        "language": "r",
        "package": "stats",
        "description": "Smooth end points of a vector ‘y’ using subsequently smaller medians and Tukey's end point rule at the very end. (of odd span),"
    },
    {
        "name": "sortedXyData",
        "language": "r",
        "package": "stats",
        "description": "This is a constructor function for the class of ‘sortedXyData’ objects. These objects are mostly used in the ‘initial’ function for a self-starting nonlinear regression model, which will be of the ‘selfStart’ class."
    },
    {
        "name": "spec.ar",
        "language": "r",
        "package": "stats",
        "description": "Fits an AR model to ‘x’ (or uses the existing fit) and computes (and by default plots) the spectral density of the fitted model."
    },
    {
        "name": "spec.pgram",
        "language": "r",
        "package": "stats",
        "description": "‘spec.pgram’ calculates the periodogram using a fast Fourier transform, and optionally smooths the result with a series of modified Daniell smoothers (moving averages giving half weight to the end values)."
    },
    {
        "name": "spec.taper",
        "language": "r",
        "package": "stats",
        "description": "Apply a cosine-bell taper to a time series."
    },
    {
        "name": "spectrum",
        "language": "r",
        "package": "stats",
        "description": "The ‘spectrum’ function estimates the spectral density of a time series."
    },
    {
        "name": "spline",
        "language": "r",
        "package": "stats",
        "description": "Perform cubic (or Hermite) spline interpolation of given data points, returning either a list of points obtained by the interpolation or a _function_ performing the interpolation."
    },
    {
        "name": "splinefun",
        "language": "r",
        "package": "stats",
        "description": "Perform cubic (or Hermite) spline interpolation of given data points, returning either a list of points obtained by the interpolation or a _function_ performing the interpolation."
    },
    {
        "name": "splinefunH",
        "language": "r",
        "package": "stats",
        "description": "Perform cubic (or Hermite) spline interpolation of given data points, returning either a list of points obtained by the interpolation or a _function_ performing the interpolation."
    },
    {
        "name": "start",
        "language": "r",
        "package": "stats",
        "description": "Extract and encode the times the first and last observations were taken. Provided only for compatibility with S version 2."
    },
    {
        "name": "stat.anova",
        "language": "r",
        "package": "stats",
        "description": "This is a utility function, used in ‘lm’ and ‘glm’ methods for ‘anova(..., test != NULL)’ and should not be used by the average user."
    },
    {
        "name": "step",
        "language": "r",
        "package": "stats",
        "description": "Select a formula-based model by AIC."
    },
    {
        "name": "stepfun",
        "language": "r",
        "package": "stats",
        "description": "Given the vectors (x[1], ..., x[n]) and (y[0], y[1], ..., y[n]) (one value more!), ‘stepfun(x, y, ...)’ returns an interpolating ‘step’ function, say ‘fn’. I.e., fn(t) = c[i] (constant) for t in ( x[i], x[i+1]) and at the abscissa values, if (by default) ‘right = FALSE’, fn(x[i]) = y[i] and for ‘right = TRUE’, fn(x[i]) = y[i-1], for i=1, ..., n. The value of the constant c[i] above depends on the ‘continuity’ parameter ‘f’. For the default, ‘right = FALSE, f = 0’, ‘fn’ is a _cadlag_ function, i.e., continuous from the right, limits from the left, so that the function is piecewise constant on intervals that include their _left_ endpoint. In general, c[i] is interpolated in between the neighbouring y values, c[i] = (1-f)*y[i] + f*y[i+1]. Therefore, for non-0 values of ‘f’, ‘fn’ may no longer be a proper step function, since it can be discontinuous from both sides, unless ‘right = TRUE, f = 1’ which is left-continuous (i.e., constant pieces contain their right endpoint)."
    },
    {
        "name": "stl",
        "language": "r",
        "package": "stats",
        "description": "Decompose a time series into seasonal, trend and irregular components using ‘loess’, acronym STL."
    },
    {
        "name": "summary.aov",
        "language": "r",
        "package": "stats",
        "description": "Summarize an analysis of variance model."
    },
    {
        "name": "summary.glm",
        "language": "r",
        "package": "stats",
        "description": "These functions are all ‘methods’ for class ‘glm’ or ‘summary.glm’ objects."
    },
    {
        "name": "summary.lm",
        "language": "r",
        "package": "stats",
        "description": "‘summary’ method for class ‘\"lm\"’."
    },
    {
        "name": "summary.manova",
        "language": "r",
        "package": "stats",
        "description": "A ‘summary’ method for class ‘\"manova\"’."
    },
    {
        "name": "summary.stepfun",
        "language": "r",
        "package": "stats",
        "description": "Given the vectors (x[1], ..., x[n]) and (y[0], y[1], ..., y[n]) (one value more!), ‘stepfun(x, y, ...)’ returns an interpolating ‘step’ function, say ‘fn’. I.e., fn(t) = c[i] (constant) for t in ( x[i], x[i+1]) and at the abscissa values, if (by default) ‘right = FALSE’, fn(x[i]) = y[i] and for ‘right = TRUE’, fn(x[i]) = y[i-1], for i=1, ..., n. The value of the constant c[i] above depends on the ‘continuity’ parameter ‘f’. For the default, ‘right = FALSE, f = 0’, ‘fn’ is a _cadlag_ function, i.e., continuous from the right, limits from the left, so that the function is piecewise constant on intervals that include their _left_ endpoint. In general, c[i] is interpolated in between the neighbouring y values, c[i] = (1-f)*y[i] + f*y[i+1]. Therefore, for non-0 values of ‘f’, ‘fn’ may no longer be a proper step function, since it can be discontinuous from both sides, unless ‘right = TRUE, f = 1’ which is left-continuous (i.e., constant pieces contain their right endpoint)."
    },
    {
        "name": "supsmu",
        "language": "r",
        "package": "stats",
        "description": "Smooth the (x, y) values by Friedman's ‘super smoother’."
    },
    {
        "name": "symnum",
        "language": "r",
        "package": "stats",
        "description": "Symbolically encode a given numeric or logical vector or array. Particularly useful for visualization of structured matrices, e.g., correlation, sparse, or logical ones."
    },
    {
        "name": "t.test",
        "language": "r",
        "package": "stats",
        "description": "Performs one and two sample t-tests on vectors of data."
    },
    {
        "name": "termplot",
        "language": "r",
        "package": "stats",
        "description": "Plots regression terms against their predictors, optionally with standard errors and partial residuals added."
    },
    {
        "name": "terms",
        "language": "r",
        "package": "stats",
        "description": "The function ‘terms’ is a generic function which can be used to extract _terms_ objects from various kinds of R data objects."
    },
    {
        "name": "terms.formula",
        "language": "r",
        "package": "stats",
        "description": "This function takes a formula and some optional arguments and constructs a terms object. The terms object can then be used to construct a ‘model.matrix’."
    },
    {
        "name": "time",
        "language": "r",
        "package": "stats",
        "description": "‘time’ creates the vector of times at which a time series was sampled. ‘cycle’ gives the positions in the cycle of each observation. ‘frequency’ returns the number of samples per unit time and ‘deltat’ the time interval between observations (see ‘ts’)."
    },
    {
        "name": "toeplitz",
        "language": "r",
        "package": "stats",
        "description": "In its simplest use, ‘toeplitz()’ forms a symmetric Toeplitz matrix given its first column (or row). For the general case, asymmetric and non-square Toeplitz matrices are formed either by specifying the first column and row separately, T1 <- toeplitz(col, row) or by T <- toeplitz2(x, nr, nc) where only one of ‘(nr, nc)’ needs to be specified. In the latter case, the simple equivalence T_{i,j} = x_{i-j + n_c} is fulfilled where n_c =‘ncol(T)’."
    },
    {
        "name": "toeplitz2",
        "language": "r",
        "package": "stats",
        "description": "In its simplest use, ‘toeplitz()’ forms a symmetric Toeplitz matrix given its first column (or row). For the general case, asymmetric and non-square Toeplitz matrices are formed either by specifying the first column and row separately, T1 <- toeplitz(col, row) or by T <- toeplitz2(x, nr, nc) where only one of ‘(nr, nc)’ needs to be specified. In the latter case, the simple equivalence T_{i,j} = x_{i-j + n_c} is fulfilled where n_c =‘ncol(T)’."
    },
    {
        "name": "ts",
        "language": "r",
        "package": "stats",
        "description": "The function ‘ts’ is used to create time-series objects. ‘as.ts’ and ‘is.ts’ coerce an object to a time-series and test whether an object is a time series."
    },
    {
        "name": "ts.intersect",
        "language": "r",
        "package": "stats",
        "description": "Bind time series which have a common frequency. ‘ts.union’ pads with ‘NA’s to the total time coverage, ‘ts.intersect’ restricts to the time covered by all the series."
    },
    {
        "name": "ts.plot",
        "language": "r",
        "package": "stats",
        "description": "Plot several time series on a common plot. Unlike ‘plot.ts’ the series can have a different time bases, but they should have the same frequency."
    },
    {
        "name": "ts.union",
        "language": "r",
        "package": "stats",
        "description": "Bind time series which have a common frequency. ‘ts.union’ pads with ‘NA’s to the total time coverage, ‘ts.intersect’ restricts to the time covered by all the series."
    },
    {
        "name": "tsSmooth",
        "language": "r",
        "package": "stats",
        "description": "Performs fixed-interval smoothing on a univariate time series via a state-space model. Fixed-interval smoothing gives the best estimate of the state at each time point based on the whole observed series."
    },
    {
        "name": "tsdiag",
        "language": "r",
        "package": "stats",
        "description": "A generic function to plot time-series diagnostics."
    },
    {
        "name": "tsp",
        "language": "r",
        "package": "stats",
        "description": "‘tsp’ returns the ‘tsp’ attribute (or ‘NULL’). It is included for compatibility with S version 2. ‘tsp<-’ sets the ‘tsp’ attribute. ‘hasTsp’ ensures ‘x’ has a ‘tsp’ attribute, by adding one if needed."
    },
    {
        "name": "tsp<-",
        "language": "r",
        "package": "stats",
        "description": "‘tsp’ returns the ‘tsp’ attribute (or ‘NULL’). It is included for compatibility with S version 2. ‘tsp<-’ sets the ‘tsp’ attribute. ‘hasTsp’ ensures ‘x’ has a ‘tsp’ attribute, by adding one if needed."
    },
    {
        "name": "uniroot",
        "language": "r",
        "package": "stats",
        "description": "The function ‘uniroot’ searches the interval from ‘lower’ to ‘upper’ for a root (i.e., zero) of the function ‘f’ with respect to its first argument. Setting ‘extendInt’ to a non-‘\"no\"’ string, means searching for the correct ‘interval = c(lower,upper)’ if ‘sign(f(x))’ does not satisfy the requirements at the interval end points; see the ‘Details’ section."
    },
    {
        "name": "update",
        "language": "r",
        "package": "stats",
        "description": "‘update’ will update and (by default) re-fit a model. It does this by extracting the call stored in the object, updating the call and (by default) evaluating that call. Sometimes it is useful to call ‘update’ with only one argument, for example if the data frame has been corrected. “Extracting the call” in ‘update()’ and similar functions uses ‘getCall()’ which itself is a (S3) generic function with a default method that simply gets ‘x$call’. Because of this, ‘update()’ will often work (via its default method) on new model classes, either automatically, or by providing a simple ‘getCall()’ method for that class."
    },
    {
        "name": "update.default",
        "language": "r",
        "package": "stats",
        "description": "‘update’ will update and (by default) re-fit a model. It does this by extracting the call stored in the object, updating the call and (by default) evaluating that call. Sometimes it is useful to call ‘update’ with only one argument, for example if the data frame has been corrected. “Extracting the call” in ‘update()’ and similar functions uses ‘getCall()’ which itself is a (S3) generic function with a default method that simply gets ‘x$call’. Because of this, ‘update()’ will often work (via its default method) on new model classes, either automatically, or by providing a simple ‘getCall()’ method for that class."
    },
    {
        "name": "update.formula",
        "language": "r",
        "package": "stats",
        "description": "‘update.formula’ is used to update model formulae. This typically involves adding or dropping terms, but updates can be more general."
    },
    {
        "name": "var",
        "language": "r",
        "package": "stats",
        "description": "‘var’, ‘cov’ and ‘cor’ compute the variance of ‘x’ and the covariance or correlation of ‘x’ and ‘y’ if these are vectors. If ‘x’ and ‘y’ are matrices then the covariances (or correlations) between the columns of ‘x’ and the columns of ‘y’ are computed. ‘cov2cor’ scales a covariance matrix into the corresponding correlation matrix _efficiently_."
    },
    {
        "name": "var.test",
        "language": "r",
        "package": "stats",
        "description": "Performs an F test to compare the variances of two samples from normal populations."
    },
    {
        "name": "variable.names",
        "language": "r",
        "package": "stats",
        "description": "Simple utilities returning (non-missing) case names, and (non-eliminated) variable names."
    },
    {
        "name": "varimax",
        "language": "r",
        "package": "stats",
        "description": "These functions ‘rotate’ loading matrices in factor analysis."
    },
    {
        "name": "vcov",
        "language": "r",
        "package": "stats",
        "description": "Returns the variance-covariance matrix of the main parameters of a fitted model object. The “main” parameters of model correspond to those returned by ‘coef’, and typically do not contain a nuisance scale parameter (‘sigma’)."
    },
    {
        "name": "weighted.mean",
        "language": "r",
        "package": "stats",
        "description": "Compute a weighted mean."
    },
    {
        "name": "weighted.residuals",
        "language": "r",
        "package": "stats",
        "description": "Computed weighted residuals from a linear model fit."
    },
    {
        "name": "weights",
        "language": "r",
        "package": "stats",
        "description": "‘weights’ is a generic function which extracts fitting weights from objects returned by modeling functions. Methods can make use of ‘napredict’ methods to compensate for the omission of missing values. The default methods does so."
    },
    {
        "name": "wilcox.test",
        "language": "r",
        "package": "stats",
        "description": "Performs one- and two-sample Wilcoxon tests on vectors of data; the latter is also known as ‘Mann-Whitney’ test."
    },
    {
        "name": "window",
        "language": "r",
        "package": "stats",
        "description": "‘window’ is a generic function which extracts the subset of the object ‘x’ observed between the times ‘start’ and ‘end’. If a frequency is specified, the series is then re-sampled at the new frequency."
    },
    {
        "name": "window<-",
        "language": "r",
        "package": "stats",
        "description": "‘window’ is a generic function which extracts the subset of the object ‘x’ observed between the times ‘start’ and ‘end’. If a frequency is specified, the series is then re-sampled at the new frequency."
    },
    {
        "name": "write.ftable",
        "language": "r",
        "package": "stats",
        "description": "Read, write and coerce ‘flat’ (contingency) tables, aka ‘ftable’s."
    },
    {
        "name": "xtabs",
        "language": "r",
        "package": "stats",
        "description": "Create a contingency table (optionally a sparse matrix) from cross-classifying factors, usually contained in a data frame, using a formula interface."
    },
    {
        "name": "MDSplot",
        "language": "r",
        "package": "randomForest",
        "description": "Plot the scaling coordinates of the proximity matrix from randomForest."
    },
    {
        "name": "classCenter",
        "language": "r",
        "package": "randomForest",
        "description": "Prototypes are `representative' cases of a group of data points, given the similarity matrix among the points. They are very similar to medoids. The function is named `classCenter' to avoid conflict with the function ‘prototype’ in the ‘methods’ package."
    },
    {
        "name": "combine",
        "language": "r",
        "package": "randomForest",
        "description": "Combine two more more ensembles of trees into one."
    },
    {
        "name": "getTree",
        "language": "r",
        "package": "randomForest",
        "description": "This function extract the structure of a tree from a ‘randomForest’ object."
    },
    {
        "name": "grow",
        "language": "r",
        "package": "randomForest",
        "description": "Add additional trees to an existing ensemble of trees."
    },
    {
        "name": "importance",
        "language": "r",
        "package": "randomForest",
        "description": "This is the extractor function for variable importance measures as produced by ‘randomForest’."
    },
    {
        "name": "margin",
        "language": "r",
        "package": "randomForest",
        "description": "Compute or plot the margin of predictions from a randomForest classifier."
    },
    {
        "name": "na.roughfix",
        "language": "r",
        "package": "randomForest",
        "description": "Impute Missing Values by median/mode."
    },
    {
        "name": "outlier",
        "language": "r",
        "package": "randomForest",
        "description": "Compute outlying measures based on a proximity matrix."
    },
    {
        "name": "partialPlot",
        "language": "r",
        "package": "randomForest",
        "description": "Partial dependence plot gives a graphical depiction of the marginal effect of a variable on the class probability (classification) or response (regression)."
    },
    {
        "name": "randomForest",
        "language": "r",
        "package": "randomForest",
        "description": "‘randomForest’ implements Breiman's random forest algorithm (based on Breiman and Cutler's original Fortran code) for classification and regression. It can also be used in unsupervised mode for assessing proximities among data points."
    },
    {
        "name": "rfImpute",
        "language": "r",
        "package": "randomForest",
        "description": "Impute missing values in predictor data using proximity from randomForest."
    },
    {
        "name": "rfNews",
        "language": "r",
        "package": "randomForest",
        "description": "Show the NEWS file of the randomForest package."
    },
    {
        "name": "rfcv",
        "language": "r",
        "package": "randomForest",
        "description": "This function shows the cross-validated prediction performance of models with sequentially reduced number of predictors (ranked by variable importance) via a nested cross-validation procedure."
    },
    {
        "name": "treesize",
        "language": "r",
        "package": "randomForest",
        "description": "Size of trees (number of nodes) in and ensemble."
    },
    {
        "name": "tuneRF",
        "language": "r",
        "package": "randomForest",
        "description": "Starting with the default value of mtry, search for the optimal value (with respect to Out-of-Bag error estimate) of mtry for randomForest."
    },
    {
        "name": "varImpPlot",
        "language": "r",
        "package": "randomForest",
        "description": "Dotchart of variable importance as measured by a Random Forest"
    },
    {
        "name": "varUsed",
        "language": "r",
        "package": "randomForest",
        "description": "Find out which predictor variables are actually used in the random forest."
    },
    {
        "name": "agnes",
        "language": "r",
        "package": "cluster",
        "description": "Computes agglomerative hierarchical clustering of the dataset."
    },
    {
        "name": "bannerplot",
        "language": "r",
        "package": "cluster",
        "description": "Draws a “banner”, i.e. basically a horizontal ‘barplot’ visualizing the (agglomerative or divisive) hierarchical clustering or an other binary dendrogram structure."
    },
    {
        "name": "clara",
        "language": "r",
        "package": "cluster",
        "description": "Computes a ‘\"clara\"’ object, a ‘list’ representing a clustering of the data into ‘k’ clusters."
    },
    {
        "name": "clusGap",
        "language": "r",
        "package": "cluster",
        "description": "‘clusGap()’ calculates a goodness of clustering measure, the “gap” statistic. For each number of clusters k, it compares log(W(k)) with E*[log(W(k))] where the latter is defined via bootstrapping, i.e., simulating from a reference (H_0) distribution, a uniform distribution on the hypercube determined by the ranges of ‘x’, after first centering, and then ‘svd’ (aka ‘PCA’)-rotating them when (as by default) ‘spaceH0 = \"scaledPCA\"’. ‘maxSE(f, SE.f)’ determines the location of the *maximum* of ‘f’, taking a “1-SE rule” into account for the ‘*SE*’ methods. The default method ‘\"firstSEmax\"’ looks for the smallest k such that its value f(k) is not more than 1 standard error away from the first local maximum. This is similar but not the same as ‘\"Tibs2001SEmax\"’, Tibshirani et al's recommendation of determining the number of clusters from the gap statistics and their standard deviations."
    },
    {
        "name": "clusplot",
        "language": "r",
        "package": "cluster",
        "description": "Draws a 2-dimensional “clusplot” (clustering plot) on the current graphics device. The generic function has a default and a ‘partition’ method."
    },
    {
        "name": "coef.hclust",
        "language": "r",
        "package": "cluster",
        "description": "Computes the “agglomerative coefficient” (aka “divisive coefficient” for ‘diana’), measuring the clustering structure of the dataset. For each observation i, denote by m(i) its dissimilarity to the first cluster it is merged with, divided by the dissimilarity of the merger in the final step of the algorithm. The agglomerative coefficient is the average of all 1 - m(i). It can also be seen as the average width (or the percentage filled) of the banner plot. ‘coefHier()’ directly interfaces to the underlying C code, and “proves” that _only_ ‘object$heights’ is needed to compute the coefficient. Because it grows with the number of observations, this measure should not be used to compare datasets of very different sizes."
    },
    {
        "name": "coefHier",
        "language": "r",
        "package": "cluster",
        "description": "Computes the “agglomerative coefficient” (aka “divisive coefficient” for ‘diana’), measuring the clustering structure of the dataset. For each observation i, denote by m(i) its dissimilarity to the first cluster it is merged with, divided by the dissimilarity of the merger in the final step of the algorithm. The agglomerative coefficient is the average of all 1 - m(i). It can also be seen as the average width (or the percentage filled) of the banner plot. ‘coefHier()’ directly interfaces to the underlying C code, and “proves” that _only_ ‘object$heights’ is needed to compute the coefficient. Because it grows with the number of observations, this measure should not be used to compare datasets of very different sizes."
    },
    {
        "name": "daisy",
        "language": "r",
        "package": "cluster",
        "description": "Compute all the pairwise dissimilarities (distances) between observations in the data set. The original variables may be of mixed types. In that case, or whenever ‘metric = \"gower\"’ is set, a generalization of Gower's formula is used, see ‘Details’ below."
    },
    {
        "name": "diana",
        "language": "r",
        "package": "cluster",
        "description": "Computes a divisive hierarchical clustering of the dataset returning an object of class ‘diana’."
    },
    {
        "name": "ellipsoidPoints",
        "language": "r",
        "package": "cluster",
        "description": "Compute points on the ellipsoid boundary, mostly for drawing."
    },
    {
        "name": "ellipsoidhull",
        "language": "r",
        "package": "cluster",
        "description": "Compute the “ellipsoid hull” or “spanning ellipsoid”, i.e. the ellipsoid of minimal volume (‘area’ in 2D) such that all given points lie just inside or on the boundary of the ellipsoid."
    },
    {
        "name": "fanny",
        "language": "r",
        "package": "cluster",
        "description": "Computes a fuzzy clustering of the data into ‘k’ clusters."
    },
    {
        "name": "lower.to.upper.tri.inds",
        "language": "r",
        "package": "cluster",
        "description": "Compute index vectors for extracting or reordering of lower or upper triangular matrices that are stored as contiguous vectors."
    },
    {
        "name": "maxSE",
        "language": "r",
        "package": "cluster",
        "description": "‘clusGap()’ calculates a goodness of clustering measure, the “gap” statistic. For each number of clusters k, it compares log(W(k)) with E*[log(W(k))] where the latter is defined via bootstrapping, i.e., simulating from a reference (H_0) distribution, a uniform distribution on the hypercube determined by the ranges of ‘x’, after first centering, and then ‘svd’ (aka ‘PCA’)-rotating them when (as by default) ‘spaceH0 = \"scaledPCA\"’. ‘maxSE(f, SE.f)’ determines the location of the *maximum* of ‘f’, taking a “1-SE rule” into account for the ‘*SE*’ methods. The default method ‘\"firstSEmax\"’ looks for the smallest k such that its value f(k) is not more than 1 standard error away from the first local maximum. This is similar but not the same as ‘\"Tibs2001SEmax\"’, Tibshirani et al's recommendation of determining the number of clusters from the gap statistics and their standard deviations."
    },
    {
        "name": "meanabsdev",
        "language": "r",
        "package": "cluster",
        "description": "Internal cluster functions."
    },
    {
        "name": "medoids",
        "language": "r",
        "package": "cluster",
        "description": "Given a data matrix or dissimilarity ‘x’ for say n observational units and a clustering, compute the ‘pam()’-consistent medoids."
    },
    {
        "name": "mona",
        "language": "r",
        "package": "cluster",
        "description": "Returns a list representing a divisive hierarchical clustering of a dataset with binary variables only."
    },
    {
        "name": "pam",
        "language": "r",
        "package": "cluster",
        "description": "Partitioning (clustering) of the data into ‘k’ clusters “around medoids”, a more robust version of K-means."
    },
    {
        "name": "pltree",
        "language": "r",
        "package": "cluster",
        "description": "‘pltree()’ Draws a clustering tree (“dendrogram”) on the current graphics device. We provide the ‘twins’ method draws the tree of a ‘twins’ object, i.e., hierarchical clustering, typically resulting from ‘agnes()’ or ‘diana()’."
    },
    {
        "name": "predict.ellipsoid",
        "language": "r",
        "package": "cluster",
        "description": "Compute points on the ellipsoid boundary, mostly for drawing."
    },
    {
        "name": "silhouette",
        "language": "r",
        "package": "cluster",
        "description": "Compute silhouette information according to a given clustering in k clusters."
    },
    {
        "name": "sizeDiss",
        "language": "r",
        "package": "cluster",
        "description": "Returns the number of observations (_sample size_) corresponding to a dissimilarity like object, or equivalently, the number of rows or columns of a matrix when only the lower or upper triangular part (without diagonal) is given. It is nothing else but the inverse function of f(n) = n(n-1)/2."
    },
    {
        "name": "sortSilhouette",
        "language": "r",
        "package": "cluster",
        "description": "Compute silhouette information according to a given clustering in k clusters."
    },
    {
        "name": "upper.to.lower.tri.inds",
        "language": "r",
        "package": "cluster",
        "description": "Compute index vectors for extracting or reordering of lower or upper triangular matrices that are stored as contiguous vectors."
    },
    {
        "name": "volume",
        "language": "r",
        "package": "cluster",
        "description": "Compute the volume of geometric R object. This is a generic function and has a method for ‘ellipsoid’ objects (typically resulting from ‘ellipsoidhull()’."
    }
]