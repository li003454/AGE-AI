[
    {
        "name": "RandomForestClassifier",
        "language": "python",
        "package": "sklearn.ensemble",
        "description": "A meta estimator that fits a number of decision tree classifiers."
    },
    {
        "name": "DecisionTreeClassifier",
        "language": "python",
        "package": "sklearn.tree",
        "description": "A decision tree classifier."
    },
    {
        "name": "LinearRegression",
        "language": "python",
        "package": "sklearn.linear_model",
        "description": "Ordinary least squares Linear Regression."
    },
    {
        "name": "LogisticRegression",
        "language": "python",
        "package": "sklearn.linear_model",
        "description": "Logistic Regression classifier."
    },
    {
        "name": "KMeans",
        "language": "python",
        "package": "sklearn.cluster",
        "description": "K-Means clustering algorithm."
    },
    {
        "name": "DBSCAN",
        "language": "python",
        "package": "sklearn.cluster",
        "description": "Density-Based Spatial Clustering of Applications with Noise."
    },
    {
        "name": "PCA",
        "language": "python",
        "package": "sklearn.decomposition",
        "description": "Principal Component Analysis (PCA) for dimensionality reduction."
    },
    {
        "name": "StandardScaler",
        "language": "python",
        "package": "sklearn.preprocessing",
        "description": "Standardize features by removing the mean and scaling to unit variance."
    },
    {
        "name": "MinMaxScaler",
        "language": "python",
        "package": "sklearn.preprocessing",
        "description": "Transforms features by scaling each feature to a given range."
    },
    {
        "name": "cross_val_score",
        "language": "python",
        "package": "sklearn.model_selection",
        "description": "Evaluate a score by cross-validation."
    },
    {
        "name": "train_test_split",
        "language": "python",
        "package": "sklearn.model_selection",
        "description": "Split arrays or matrices into random train and test subsets."
    },
    {
        "name": "SVC",
        "language": "python",
        "package": "sklearn.svm",
        "description": "Support Vector Classification."
    },
    {
        "name": "MLPClassifier",
        "language": "python",
        "package": "sklearn.neural_network",
        "description": "Multi-layer Perceptron classifier."
    },
    {
        "name": "MLPRegressor",
        "language": "python",
        "package": "sklearn.neural_network",
        "description": "Multi-layer Perceptron regressor."
    },
    {
        "name": "TfidfVectorizer",
        "language": "python",
        "package": "sklearn.feature_extraction.text",
        "description": "Convert a collection of raw documents to a matrix of TF-IDF features."
    },
    {
        "name": "CountVectorizer",
        "language": "python",
        "package": "sklearn.feature_extraction.text",
        "description": "Convert a collection of text documents to a matrix of token counts."
    },
    {
        "name": "XGBClassifier",
        "language": "python",
        "package": "xgboost",
        "description": "XGBoost classifier."
    },
    {
        "name": "XGBRegressor",
        "language": "python",
        "package": "xgboost",
        "description": "XGBoost regressor."
    },
    {
        "name": "LGBMClassifier",
        "language": "python",
        "package": "lightgbm",
        "description": "LightGBM classifier."
    },
    {
        "name": "LGBMRegressor",
        "language": "python",
        "package": "lightgbm",
        "description": "LightGBM regressor."
    },
    {
        "name": "OLS",
        "language": "python",
        "package": "statsmodels.api",
        "description": "Ordinary Least Squares regression."
    },
    {
        "name": "GLM",
        "language": "python",
        "package": "statsmodels.api",
        "description": "Generalized Linear Models."
    },
    {
        "name": "Sequential",
        "language": "python",
        "package": "tensorflow.keras.models",
        "description": "Linear stack of layers in TensorFlow Keras."
    },
    {
        "name": "Dense",
        "language": "python",
        "package": "tensorflow.keras.layers",
        "description": "Fully connected layer in a neural network."
    },
    {
        "name": "Conv2D",
        "language": "python",
        "package": "tensorflow.keras.layers",
        "description": "2D convolution layer for image processing."
    },
    {
        "name": "LSTM",
        "language": "python",
        "package": "tensorflow.keras.layers",
        "description": "Long Short-Term Memory layer for sequence modeling."
    },
    {
        "name": "Adam",
        "language": "python",
        "package": "tensorflow.keras.optimizers",
        "description": "Adam optimizer for training neural networks."
    },
    {
        "name": "SGD",
        "language": "python",
        "package": "tensorflow.keras.optimizers",
        "description": "Stochastic Gradient Descent optimizer."
    },
    {
        "name": "torch.nn.Linear",
        "language": "python",
        "package": "torch.nn",
        "description": "Fully connected layer in PyTorch."
    },
    {
        "name": "torch.nn.Conv2d",
        "language": "python",
        "package": "torch.nn",
        "description": "2D convolution layer in PyTorch."
    },
    {
        "name": "torch.nn.LSTM",
        "language": "python",
        "package": "torch.nn",
        "description": "LSTM layer for sequence modeling in PyTorch."
    },
    {
        "name": "torch.optim.Adam",
        "language": "python",
        "package": "torch.optim",
        "description": "Adam optimizer for training PyTorch models."
    },
    {
        "name": "torch.optim.SGD",
        "language": "python",
        "package": "torch.optim",
        "description": "Stochastic Gradient Descent optimizer in PyTorch."
    },
    {
        "name": "torchvision.transforms.Resize",
        "language": "python",
        "package": "torchvision.transforms",
        "description": "Resize image to given size."
    },
    {
        "name": "torchvision.transforms.ToTensor",
        "language": "python",
        "package": "torchvision.transforms",
        "description": "Convert a PIL image to tensor."
    },
    {
        "name": "optuna.create_study",
        "language": "python",
        "package": "optuna",
        "description": "Create an Optuna study for hyperparameter optimization."
    },
    {
        "name": "optuna.trial.suggest_float",
        "language": "python",
        "package": "optuna.trial",
        "description": "Suggest a float parameter for tuning."
    },
    {
        "name": "AdaBoostClassifier",
        "language": "python",
        "package": "sklearn.ensemble",
        "description": "An AdaBoost classifier."
    },
    {
        "name": "GradientBoostingClassifier",
        "language": "python",
        "package": "sklearn.ensemble",
        "description": "Gradient Boosting for classification."
    },
    {
        "name": "ExtraTreesClassifier",
        "language": "python",
        "package": "sklearn.ensemble",
        "description": "An extremely randomized trees classifier."
    },
    {
        "name": "ExtraTreesRegressor",
        "language": "python",
        "package": "sklearn.ensemble",
        "description": "An extremely randomized trees regressor."
    },
    {
        "name": "Ridge",
        "language": "python",
        "package": "sklearn.linear_model",
        "description": "Ridge regression with L2 regularization."
    },
    {
        "name": "Lasso",
        "language": "python",
        "package": "sklearn.linear_model",
        "description": "Lasso regression with L1 regularization."
    },
    {
        "name": "ElasticNet",
        "language": "python",
        "package": "sklearn.linear_model",
        "description": "Elastic Net regression combining L1 and L2 penalties."
    },
    {
        "name": "HuberRegressor",
        "language": "python",
        "package": "sklearn.linear_model",
        "description": "Linear regression with robust loss function."
    },
    {
        "name": "SGDClassifier",
        "language": "python",
        "package": "sklearn.linear_model",
        "description": "Linear classifiers with SGD training."
    },
    {
        "name": "SGDRegressor",
        "language": "python",
        "package": "sklearn.linear_model",
        "description": "Linear regression with SGD training."
    },
    {
        "name": "KNeighborsClassifier",
        "language": "python",
        "package": "sklearn.neighbors",
        "description": "K-Nearest Neighbors classifier."
    },
    {
        "name": "KNeighborsRegressor",
        "language": "python",
        "package": "sklearn.neighbors",
        "description": "K-Nearest Neighbors regressor."
    },
    {
        "name": "GaussianNB",
        "language": "python",
        "package": "sklearn.naive_bayes",
        "description": "Gaussian Naive Bayes classifier."
    },
    {
        "name": "MultinomialNB",
        "language": "python",
        "package": "sklearn.naive_bayes",
        "description": "Multinomial Naive Bayes classifier for text classification."
    },
    {
        "name": "BernoulliNB",
        "language": "python",
        "package": "sklearn.naive_bayes",
        "description": "Bernoulli Naive Bayes classifier for binary data."
    },
    {
        "name": "MeanShift",
        "language": "python",
        "package": "sklearn.cluster",
        "description": "Mean shift clustering algorithm."
    },
    {
        "name": "AgglomerativeClustering",
        "language": "python",
        "package": "sklearn.cluster",
        "description": "Hierarchical clustering with different linkage methods."
    },
    {
        "name": "FeatureUnion",
        "language": "python",
        "package": "sklearn.pipeline",
        "description": "Combines multiple feature extraction pipelines."
    },
    {
        "name": "Pipeline",
        "language": "python",
        "package": "sklearn.pipeline",
        "description": "Pipeline for chaining multiple estimators."
    },
    {
        "name": "SelectKBest",
        "language": "python",
        "package": "sklearn.feature_selection",
        "description": "Select top K best features."
    },
    {
        "name": "SelectFromModel",
        "language": "python",
        "package": "sklearn.feature_selection",
        "description": "Select features based on importance weights."
    },
    {
        "name": "XGBRanker",
        "language": "python",
        "package": "xgboost",
        "description": "XGBoost ranking model."
    },
    {
        "name": "CatBoostClassifier",
        "language": "python",
        "package": "catboost",
        "description": "CatBoost classifier."
    },
    {
        "name": "CatBoostRegressor",
        "language": "python",
        "package": "catboost",
        "description": "CatBoost regressor."
    },
    {
        "name": "transformers.AutoModel",
        "language": "python",
        "package": "transformers",
        "description": "Automatically loads a pre-trained transformer model."
    },
    {
        "name": "transformers.AutoTokenizer",
        "language": "python",
        "package": "transformers",
        "description": "Automatically loads a tokenizer for a transformer model."
    },
    {
        "name": "nltk.word_tokenize",
        "language": "python",
        "package": "nltk",
        "description": "Tokenizes words in a sentence."
    },
    {
        "name": "nltk.sent_tokenize",
        "language": "python",
        "package": "nltk",
        "description": "Tokenizes sentences in a paragraph."
    },
    {
        "name": "nltk.pos_tag",
        "language": "python",
        "package": "nltk",
        "description": "Assigns part-of-speech tags to words."
    },
    {
        "name": "nltk.FreqDist",
        "language": "python",
        "package": "nltk",
        "description": "Computes frequency distribution of words."
    },
    {
        "name": "torch.nn.BatchNorm1d",
        "language": "python",
        "package": "torch.nn",
        "description": "Applies batch normalization for 1D inputs."
    },
    {
        "name": "torch.nn.BatchNorm2d",
        "language": "python",
        "package": "torch.nn",
        "description": "Applies batch normalization for 2D inputs."
    },
    {
        "name": "torch.nn.ReLU",
        "language": "python",
        "package": "torch.nn",
        "description": "Applies the ReLU activation function."
    },
    {
        "name": "torch.nn.Sigmoid",
        "language": "python",
        "package": "torch.nn",
        "description": "Applies the Sigmoid activation function."
    },
    {
        "name": "optuna.Study",
        "language": "python",
        "package": "optuna",
        "description": "Creates a hyperparameter optimization study."
    },
    {
        "name": "optuna.visualization.plot_optimization_history",
        "language": "python",
        "package": "optuna.visualization",
        "description": "Plots the optimization history of trials."
    }
]

